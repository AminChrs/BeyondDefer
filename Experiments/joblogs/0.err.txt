+ module load cuda/12.1
++ /usr/bin/tclsh8.6 /usr/lib/x86_64-linux-gnu/modulecmd.tcl sh load cuda/12.1
Loading cuda/12.1
  Loading requirement: cudnn/8.9.1-cu12.x
+ eval 'LD_LIBRARY_PATH=/is/software/nvidia/cuda-12.1/lib64:/is/software/nvidia/cudnn-8.9.1-cu12.x/lib:/is/software/nvidia/cudnn-7.5-cu10.0/lib64:/is/software/nvidia/cuda-10.1/lib64;' export 'LD_LIBRARY_PATH;' 'CUDA_HOME=/is/software/nvidia/cuda-12.1;' export 'CUDA_HOME;' 'PATH=/is/software/nvidia/cuda-12.1/bin:/home/mcharusaie/.local/bin:/home/mcharusaie/anaconda3/bin:/home/mcharusaie/anaconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/is/software/nvidia/cuda-10.1/bin;' export 'PATH;' '__MODULES_LMALTNAME=cudnn/8.9.1-cu12.x\&as\|cudnn/latest:cuda/12.1\&as\|cuda/latest;' export '__MODULES_LMALTNAME;' 'LIBRARY_PATH=/is/software/nvidia/cudnn-8.9.1-cu12.x/lib:/is/software/nvidia/cudnn-7.5-cu10.0/lib64;' export 'LIBRARY_PATH;' '__MODULES_LMPREREQ=cuda/12.1\&cudnn/8.9.1-cu12.x;' export '__MODULES_LMPREREQ;' '_LMFILES_=/is/software/modules/cudnn/8.9.1-cu12.x:/is/software/modules/cuda/12.1;' export '_LMFILES_;' 'LOADEDMODULES=cudnn/8.9.1-cu12.x:cuda/12.1;' export 'LOADEDMODULES;' 'CPLUS_INCLUDE_PATH=/is/software/nvidia/cuda-12.1/include:/is/software/nvidia/cudnn-8.9.1-cu12.x/include:/is/software/nvidia/cudnn-7.5-cu10.0/include;' export 'CPLUS_INCLUDE_PATH;' 'C_INCLUDE_PATH=/is/software/nvidia/cuda-12.1/include:/is/software/nvidia/cudnn-8.9.1-cu12.x/include:/is/software/nvidia/cudnn-7.5-cu10.0/include;' export 'C_INCLUDE_PATH;' '__MODULES_LMTAG=cudnn/8.9.1-cu12.x\&auto-loaded;' export '__MODULES_LMTAG;' test '0;'
++ LD_LIBRARY_PATH=/is/software/nvidia/cuda-12.1/lib64:/is/software/nvidia/cudnn-8.9.1-cu12.x/lib:/is/software/nvidia/cudnn-7.5-cu10.0/lib64:/is/software/nvidia/cuda-10.1/lib64
++ export LD_LIBRARY_PATH
++ CUDA_HOME=/is/software/nvidia/cuda-12.1
++ export CUDA_HOME
++ PATH=/is/software/nvidia/cuda-12.1/bin:/home/mcharusaie/.local/bin:/home/mcharusaie/anaconda3/bin:/home/mcharusaie/anaconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/is/software/nvidia/cuda-10.1/bin
++ export PATH
++ __MODULES_LMALTNAME='cudnn/8.9.1-cu12.x&as|cudnn/latest:cuda/12.1&as|cuda/latest'
++ export __MODULES_LMALTNAME
++ LIBRARY_PATH=/is/software/nvidia/cudnn-8.9.1-cu12.x/lib:/is/software/nvidia/cudnn-7.5-cu10.0/lib64
++ export LIBRARY_PATH
++ __MODULES_LMPREREQ='cuda/12.1&cudnn/8.9.1-cu12.x'
++ export __MODULES_LMPREREQ
++ _LMFILES_=/is/software/modules/cudnn/8.9.1-cu12.x:/is/software/modules/cuda/12.1
++ export _LMFILES_
++ LOADEDMODULES=cudnn/8.9.1-cu12.x:cuda/12.1
++ export LOADEDMODULES
++ CPLUS_INCLUDE_PATH=/is/software/nvidia/cuda-12.1/include:/is/software/nvidia/cudnn-8.9.1-cu12.x/include:/is/software/nvidia/cudnn-7.5-cu10.0/include
++ export CPLUS_INCLUDE_PATH
++ C_INCLUDE_PATH=/is/software/nvidia/cuda-12.1/include:/is/software/nvidia/cudnn-8.9.1-cu12.x/include:/is/software/nvidia/cudnn-7.5-cu10.0/include
++ export C_INCLUDE_PATH
++ __MODULES_LMTAG='cudnn/8.9.1-cu12.x&auto-loaded'
++ export __MODULES_LMTAG
++ test 0
+ _mlstatus=0
+ return 0
+ source /home/mcharusaie/myvenv/bin/activate
++ deactivate nondestructive
++ '[' -n '' ']'
++ '[' -n '' ']'
++ '[' -n /usr/bin/bash -o -n '' ']'
++ hash -r
++ '[' -n '' ']'
++ unset VIRTUAL_ENV
++ unset VIRTUAL_ENV_PROMPT
++ '[' '!' nondestructive = nondestructive ']'
++ VIRTUAL_ENV=/home/mcharusaie/myvenv
++ export VIRTUAL_ENV
++ _OLD_VIRTUAL_PATH=/is/software/nvidia/cuda-12.1/bin:/home/mcharusaie/.local/bin:/home/mcharusaie/anaconda3/bin:/home/mcharusaie/anaconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/is/software/nvidia/cuda-10.1/bin
++ PATH=/home/mcharusaie/myvenv/bin:/is/software/nvidia/cuda-12.1/bin:/home/mcharusaie/.local/bin:/home/mcharusaie/anaconda3/bin:/home/mcharusaie/anaconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin:/is/software/nvidia/cuda-10.1/bin
++ export PATH
++ '[' -n '' ']'
++ '[' -z '' ']'
++ _OLD_VIRTUAL_PS1=
++ PS1='(myvenv) '
++ export PS1
++ VIRTUAL_ENV_PROMPT='(myvenv) '
++ export VIRTUAL_ENV_PROMPT
++ '[' -n /usr/bin/bash -o -n '' ']'
++ hash -r
+++ dirname /lustre/home/mcharusaie/Git_Beyond/Experiments/run.sh
++ cd /lustre/home/mcharusaie/Git_Beyond/Experiments
++ pwd
+ MYDIR=/lustre/home/mcharusaie/Git_Beyond/Experiments
+ python3 SampleComp.py
  0%|          | 0/1 [00:00<?, ?it/s]INFO:root:Epoch: [0][0/20]	Time 5.242 (5.242)	Loss 29.8658 (29.8658)	Prec@1 Classifier 11.523                                 (11.523)	Prec@1 Sim 11.523 (11.523)	Prec@1 Meta 10.156                                     (10.156)
INFO:root:Epoch: [0][10/20]	Time 0.064 (0.555)	Loss 17.8173 (22.9576)	Prec@1 Classifier 9.766                                 (9.428)	Prec@1 Sim 7.227 (8.771)	Prec@1 Meta 9.766                                     (9.996)
100%|██████████| 1/1 [00:07<00:00,  7.00s/it]100%|██████████| 1/1 [00:07<00:00,  7.00s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
  0%|          | 0/6 [00:00<?, ?it/s]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:01<00:00,  1.32s/it][A100%|██████████| 1/1 [00:01<00:00,  1.32s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0, accuracy: 0.1766
 17%|█▋        | 1/6 [00:05<00:26,  5.25s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:01<00:00,  1.39s/it][A100%|██████████| 1/1 [00:01<00:00,  1.39s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0.1, accuracy: 0.1766
 33%|███▎      | 2/6 [00:10<00:20,  5.22s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:01<00:00,  1.24s/it][A100%|██████████| 1/1 [00:01<00:00,  1.24s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0.3, accuracy: 0.1766
 50%|█████     | 3/6 [00:15<00:15,  5.12s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:01<00:00,  1.12s/it][A100%|██████████| 1/1 [00:01<00:00,  1.12s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0.5, accuracy: 0.1766
 67%|██████▋   | 4/6 [00:20<00:10,  5.08s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:01<00:00,  1.48s/it][A100%|██████████| 1/1 [00:01<00:00,  1.48s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0.9, accuracy: 0.1766
 83%|████████▎ | 5/6 [00:25<00:05,  5.23s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:01<00:00,  1.48s/it][A100%|██████████| 1/1 [00:01<00:00,  1.49s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 1, accuracy: 0.1766
100%|██████████| 6/6 [00:31<00:00,  5.30s/it]100%|██████████| 6/6 [00:31<00:00,  5.23s/it]
  0%|          | 0/1 [00:00<?, ?it/s]/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
100%|██████████| 1/1 [00:01<00:00,  1.51s/it]100%|██████████| 1/1 [00:01<00:00,  1.51s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:02<00:00,  2.53s/it]100%|██████████| 1/1 [00:02<00:00,  2.53s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
  0%|          | 0/1 [00:00<?, ?it/s]/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/one_v_all.py:43: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
100%|██████████| 1/1 [00:01<00:00,  1.53s/it]100%|██████████| 1/1 [00:01<00:00,  1.53s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
  0%|          | 0/3 [00:00<?, ?it/s]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:35: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:36: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  m2 = torch.tensor(m2).to(self.device)

100%|██████████| 1/1 [00:01<00:00,  1.48s/it][A100%|██████████| 1/1 [00:01<00:00,  1.49s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0, accuracy: 0.1008
 33%|███▎      | 1/3 [00:03<00:07,  4.00s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:35: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:36: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  m2 = torch.tensor(m2).to(self.device)

100%|██████████| 1/1 [00:01<00:00,  1.17s/it][A100%|██████████| 1/1 [00:01<00:00,  1.17s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0.5, accuracy: 0.1008
 67%|██████▋   | 2/3 [00:07<00:03,  3.97s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:35: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:36: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  m2 = torch.tensor(m2).to(self.device)

100%|██████████| 1/1 [00:01<00:00,  1.35s/it][A100%|██████████| 1/1 [00:01<00:00,  1.35s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 1, accuracy: 0.1008
100%|██████████| 3/3 [00:12<00:00,  4.07s/it]100%|██████████| 3/3 [00:12<00:00,  4.04s/it]
  0%|          | 0/1 [00:00<?, ?it/s]/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:35: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:36: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  m2 = torch.tensor(m2).to(self.device)
100%|██████████| 1/1 [00:01<00:00,  1.12s/it]100%|██████████| 1/1 [00:01<00:00,  1.12s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:Loading cifar10h data
  0%|          | 0/1 [00:00<?, ?it/s]INFO:root:Epoch: [0][0/7]	Time 1.090 (1.090)	Loss 32.4492 (32.4492)	Prec@1 Classifier 6.000                                 (6.000)	Prec@1 Sim 0.400 (0.400)	Prec@1 Meta 2.800                                     (2.800)
100%|██████████| 1/1 [00:05<00:00,  5.26s/it]100%|██████████| 1/1 [00:05<00:00,  5.26s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
  0%|          | 0/6 [00:00<?, ?it/s]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:02<00:00,  2.48s/it][A100%|██████████| 1/1 [00:02<00:00,  2.48s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0, accuracy: 0.949
 17%|█▋        | 1/6 [00:04<00:21,  4.21s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:02<00:00,  2.60s/it][A100%|██████████| 1/1 [00:02<00:00,  2.60s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0.1, accuracy: 0.949
 33%|███▎      | 2/6 [00:08<00:16,  4.24s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:02<00:00,  2.43s/it][A100%|██████████| 1/1 [00:02<00:00,  2.43s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0.3, accuracy: 0.949
 50%|█████     | 3/6 [00:12<00:12,  4.26s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:02<00:00,  2.32s/it][A100%|██████████| 1/1 [00:02<00:00,  2.32s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0.5, accuracy: 0.949
 67%|██████▋   | 4/6 [00:16<00:08,  4.19s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:02<00:00,  2.27s/it][A100%|██████████| 1/1 [00:02<00:00,  2.27s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0.9, accuracy: 0.949
 83%|████████▎ | 5/6 [00:20<00:04,  4.13s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:02<00:00,  2.33s/it][A100%|██████████| 1/1 [00:02<00:00,  2.34s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 1, accuracy: 0.949
100%|██████████| 6/6 [00:25<00:00,  4.14s/it]100%|██████████| 6/6 [00:25<00:00,  4.17s/it]
  0%|          | 0/1 [00:00<?, ?it/s]/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
100%|██████████| 1/1 [00:02<00:00,  2.33s/it]100%|██████████| 1/1 [00:02<00:00,  2.33s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:04<00:00,  4.10s/it]100%|██████████| 1/1 [00:04<00:00,  4.10s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
  0%|          | 0/1 [00:00<?, ?it/s]/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/one_v_all.py:43: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
100%|██████████| 1/1 [00:02<00:00,  2.34s/it]100%|██████████| 1/1 [00:02<00:00,  2.34s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
  0%|          | 0/3 [00:00<?, ?it/s]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:35: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:36: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  m2 = torch.tensor(m2).to(self.device)

100%|██████████| 1/1 [00:02<00:00,  2.40s/it][A100%|██████████| 1/1 [00:02<00:00,  2.41s/it]
INFO:root:alpha: 0, accuracy: 0.205
 33%|███▎      | 1/3 [00:03<00:07,  3.51s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:35: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:36: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  m2 = torch.tensor(m2).to(self.device)

100%|██████████| 1/1 [00:01<00:00,  1.91s/it][A100%|██████████| 1/1 [00:01<00:00,  1.91s/it]
INFO:root:alpha: 0.5, accuracy: 0.205
 67%|██████▋   | 2/3 [00:06<00:03,  3.25s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:35: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:36: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  m2 = torch.tensor(m2).to(self.device)

100%|██████████| 1/1 [00:02<00:00,  2.05s/it][A100%|██████████| 1/1 [00:02<00:00,  2.05s/it]
INFO:root:alpha: 1, accuracy: 0.205
100%|██████████| 3/3 [00:09<00:00,  3.17s/it]100%|██████████| 3/3 [00:09<00:00,  3.22s/it]
  0%|          | 0/1 [00:00<?, ?it/s]/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:35: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:36: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  m2 = torch.tensor(m2).to(self.device)
100%|██████████| 1/1 [00:01<00:00,  1.92s/it]100%|██████████| 1/1 [00:01<00:00,  1.92s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:([{'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.0, 'classifier_nondeferred_acc': 0, 'meta_deferred_acc': 0.035, 'system_acc': 0.035}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.0004999999999999449, 'classifier_nondeferred_acc': 0.0, 'meta_deferred_acc': 0.03501750875437719, 'system_acc': 0.035}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.010499999999999954, 'classifier_nondeferred_acc': 0.0, 'meta_deferred_acc': 0.035371399696816574, 'system_acc': 0.035}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.020499999999999963, 'classifier_nondeferred_acc': 0.0, 'meta_deferred_acc': 0.03573251659009699, 'system_acc': 0.035}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.03049999999999997, 'classifier_nondeferred_acc': 0.0, 'meta_deferred_acc': 0.036101083032490974, 'system_acc': 0.035}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.04049999999999998, 'classifier_nondeferred_acc': 0.0, 'meta_deferred_acc': 0.03647733194372069, 'system_acc': 0.035}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.05049999999999999, 'classifier_nondeferred_acc': 0.0, 'meta_deferred_acc': 0.03686150605581885, 'system_acc': 0.035}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.061000000000000054, 'classifier_nondeferred_acc': 0.0, 'meta_deferred_acc': 0.03727369542066028, 'system_acc': 0.035}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.07099999999999995, 'classifier_nondeferred_acc': 0.0, 'meta_deferred_acc': 0.03767491926803014, 'system_acc': 0.035}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.08099999999999996, 'classifier_nondeferred_acc': 0.0, 'meta_deferred_acc': 0.03808487486398259, 'system_acc': 0.035}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.09099999999999997, 'classifier_nondeferred_acc': 0.0, 'meta_deferred_acc': 0.037953795379537955, 'system_acc': 0.0345}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.10099999999999998, 'classifier_nondeferred_acc': 0.0, 'meta_deferred_acc': 0.03837597330367074, 'system_acc': 0.0345}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.11150000000000004, 'classifier_nondeferred_acc': 0.0, 'meta_deferred_acc': 0.038829487900956666, 'system_acc': 0.0345}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.12150000000000005, 'classifier_nondeferred_acc': 0.0, 'meta_deferred_acc': 0.03927148548662493, 'system_acc': 0.0345}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.13149999999999995, 'classifier_nondeferred_acc': 0.0, 'meta_deferred_acc': 0.039723661485319514, 'system_acc': 0.0345}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.14149999999999996, 'classifier_nondeferred_acc': 0.0, 'meta_deferred_acc': 0.0401863715783343, 'system_acc': 0.0345}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.15149999999999997, 'classifier_nondeferred_acc': 0.0, 'meta_deferred_acc': 0.04065998821449617, 'system_acc': 0.0345}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.16200000000000003, 'classifier_nondeferred_acc': 0.0, 'meta_deferred_acc': 0.04116945107398568, 'system_acc': 0.0345}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.17200000000000004, 'classifier_nondeferred_acc': 0.0029069767441860465, 'meta_deferred_acc': 0.04106280193236715, 'system_acc': 0.0345}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.18200000000000005, 'classifier_nondeferred_acc': 0.0027472527472527475, 'meta_deferred_acc': 0.04095354523227384, 'system_acc': 0.034}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.19199999999999995, 'classifier_nondeferred_acc': 0.005208333333333333, 'meta_deferred_acc': 0.04084158415841584, 'system_acc': 0.034}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.20199999999999996, 'classifier_nondeferred_acc': 0.007425742574257425, 'meta_deferred_acc': 0.040100250626566414, 'system_acc': 0.0335}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.21250000000000002, 'classifier_nondeferred_acc': 0.007058823529411765, 'meta_deferred_acc': 0.040634920634920635, 'system_acc': 0.0335}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.22250000000000003, 'classifier_nondeferred_acc': 0.011235955056179775, 'meta_deferred_acc': 0.041157556270096464, 'system_acc': 0.0345}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.23250000000000004, 'classifier_nondeferred_acc': 0.015053763440860216, 'meta_deferred_acc': 0.03973941368078176, 'system_acc': 0.034}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.24250000000000005, 'classifier_nondeferred_acc': 0.016494845360824743, 'meta_deferred_acc': 0.04026402640264026, 'system_acc': 0.0345}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.25249999999999995, 'classifier_nondeferred_acc': 0.01782178217821782, 'meta_deferred_acc': 0.04080267558528428, 'system_acc': 0.035}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.26249999999999996, 'classifier_nondeferred_acc': 0.017142857142857144, 'meta_deferred_acc': 0.04067796610169491, 'system_acc': 0.0345}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.273, 'classifier_nondeferred_acc': 0.018315018315018316, 'meta_deferred_acc': 0.04126547455295736, 'system_acc': 0.035}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.28300000000000003, 'classifier_nondeferred_acc': 0.019434628975265017, 'meta_deferred_acc': 0.04184100418410042, 'system_acc': 0.0355}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.29300000000000004, 'classifier_nondeferred_acc': 0.01877133105802048, 'meta_deferred_acc': 0.04172560113154172, 'system_acc': 0.035}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.30300000000000005, 'classifier_nondeferred_acc': 0.019801980198019802, 'meta_deferred_acc': 0.04232424677187949, 'system_acc': 0.0355}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.31299999999999994, 'classifier_nondeferred_acc': 0.020766773162939296, 'meta_deferred_acc': 0.042212518195050945, 'system_acc': 0.0355}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.3235, 'classifier_nondeferred_acc': 0.02009273570324575, 'meta_deferred_acc': 0.04212860310421286, 'system_acc': 0.035}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.3335, 'classifier_nondeferred_acc': 0.020989505247376312, 'meta_deferred_acc': 0.042010502625656414, 'system_acc': 0.035}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.3435, 'classifier_nondeferred_acc': 0.020378457059679767, 'meta_deferred_acc': 0.04265041888804265, 'system_acc': 0.035}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.35350000000000004, 'classifier_nondeferred_acc': 0.019801980198019802, 'meta_deferred_acc': 0.04176334106728538, 'system_acc': 0.034}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.36350000000000005, 'classifier_nondeferred_acc': 0.02063273727647868, 'meta_deferred_acc': 0.04241948153967007, 'system_acc': 0.0345}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.374, 'classifier_nondeferred_acc': 0.020053475935828877, 'meta_deferred_acc': 0.04233226837060703, 'system_acc': 0.034}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.384, 'classifier_nondeferred_acc': 0.01953125, 'meta_deferred_acc': 0.041396103896103896, 'system_acc': 0.033}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.394, 'classifier_nondeferred_acc': 0.01903553299492386, 'meta_deferred_acc': 0.041254125412541254, 'system_acc': 0.0325}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.404, 'classifier_nondeferred_acc': 0.019801980198019802, 'meta_deferred_acc': 0.041107382550335574, 'system_acc': 0.0325}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.41400000000000003, 'classifier_nondeferred_acc': 0.01932367149758454, 'meta_deferred_acc': 0.04010238907849829, 'system_acc': 0.0315}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.4245, 'classifier_nondeferred_acc': 0.020023557126030624, 'meta_deferred_acc': 0.03996524761077324, 'system_acc': 0.0315}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.4345, 'classifier_nondeferred_acc': 0.019562715765247412, 'meta_deferred_acc': 0.03978779840848806, 'system_acc': 0.031}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.4445, 'classifier_nondeferred_acc': 0.019122609673790775, 'meta_deferred_acc': 0.0405040504050405, 'system_acc': 0.031}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.4545, 'classifier_nondeferred_acc': 0.019801980198019802, 'meta_deferred_acc': 0.04032997250229148, 'system_acc': 0.031}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.4645, 'classifier_nondeferred_acc': 0.02045209903121636, 'meta_deferred_acc': 0.04108309990662932, 'system_acc': 0.0315}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.475, 'classifier_nondeferred_acc': 0.021052631578947368, 'meta_deferred_acc': 0.0419047619047619, 'system_acc': 0.032}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.485, 'classifier_nondeferred_acc': 0.02268041237113402, 'meta_deferred_acc': 0.04174757281553398, 'system_acc': 0.0325}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.495, 'classifier_nondeferred_acc': 0.022222222222222223, 'meta_deferred_acc': 0.040594059405940595, 'system_acc': 0.0315}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.505, 'classifier_nondeferred_acc': 0.02178217821782178, 'meta_deferred_acc': 0.04141414141414142, 'system_acc': 0.0315}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.515, 'classifier_nondeferred_acc': 0.021359223300970873, 'meta_deferred_acc': 0.041237113402061855, 'system_acc': 0.031}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.525, 'classifier_nondeferred_acc': 0.02095238095238095, 'meta_deferred_acc': 0.042105263157894736, 'system_acc': 0.031}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.5355, 'classifier_nondeferred_acc': 0.021475256769374416, 'meta_deferred_acc': 0.04198062432723358, 'system_acc': 0.031}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.5455, 'classifier_nondeferred_acc': 0.021081576535288724, 'meta_deferred_acc': 0.041804180418041806, 'system_acc': 0.0305}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.5555, 'classifier_nondeferred_acc': 0.021602160216021602, 'meta_deferred_acc': 0.04161979752530934, 'system_acc': 0.0305}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.5655, 'classifier_nondeferred_acc': 0.022104332449160036, 'meta_deferred_acc': 0.04142692750287687, 'system_acc': 0.0305}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.5755, 'classifier_nondeferred_acc': 0.022589052997393572, 'meta_deferred_acc': 0.04240282685512368, 'system_acc': 0.031}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.5860000000000001, 'classifier_nondeferred_acc': 0.02218430034129693, 'meta_deferred_acc': 0.03985507246376811, 'system_acc': 0.0295}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.596, 'classifier_nondeferred_acc': 0.022651006711409395, 'meta_deferred_acc': 0.04084158415841584, 'system_acc': 0.03}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.606, 'classifier_nondeferred_acc': 0.022277227722772276, 'meta_deferred_acc': 0.04187817258883249, 'system_acc': 0.03}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.616, 'classifier_nondeferred_acc': 0.021915584415584416, 'meta_deferred_acc': 0.0390625, 'system_acc': 0.0285}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.626, 'classifier_nondeferred_acc': 0.0231629392971246, 'meta_deferred_acc': 0.03609625668449198, 'system_acc': 0.028}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.6365000000000001, 'classifier_nondeferred_acc': 0.022780832678711706, 'meta_deferred_acc': 0.03576341127922971, 'system_acc': 0.0275}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.6465000000000001, 'classifier_nondeferred_acc': 0.02242846094354215, 'meta_deferred_acc': 0.03536067892503536, 'system_acc': 0.027}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.6565, 'classifier_nondeferred_acc': 0.02361005331302361, 'meta_deferred_acc': 0.033478893740902474, 'system_acc': 0.027}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.6665, 'classifier_nondeferred_acc': 0.024756189047261814, 'meta_deferred_acc': 0.031484257871064465, 'system_acc': 0.027}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.6765, 'classifier_nondeferred_acc': 0.024390243902439025, 'meta_deferred_acc': 0.030911901081916538, 'system_acc': 0.0265}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.687, 'classifier_nondeferred_acc': 0.025473071324599708, 'meta_deferred_acc': 0.027156549520766772, 'system_acc': 0.026}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.6970000000000001, 'classifier_nondeferred_acc': 0.02654232424677188, 'meta_deferred_acc': 0.024752475247524754, 'system_acc': 0.026}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.7070000000000001, 'classifier_nondeferred_acc': 0.028288543140028287, 'meta_deferred_acc': 0.023890784982935155, 'system_acc': 0.027}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.7170000000000001, 'classifier_nondeferred_acc': 0.02789400278940028, 'meta_deferred_acc': 0.024734982332155476, 'system_acc': 0.027}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.727, 'classifier_nondeferred_acc': 0.029573590096286108, 'meta_deferred_acc': 0.02197802197802198, 'system_acc': 0.0275}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.7375, 'classifier_nondeferred_acc': 0.031186440677966103, 'meta_deferred_acc': 0.022857142857142857, 'system_acc': 0.029}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.7475, 'classifier_nondeferred_acc': 0.033444816053511704, 'meta_deferred_acc': 0.01782178217821782, 'system_acc': 0.0295}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.7575000000000001, 'classifier_nondeferred_acc': 0.034323432343234324, 'meta_deferred_acc': 0.016494845360824743, 'system_acc': 0.03}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.7675, 'classifier_nondeferred_acc': 0.03452768729641694, 'meta_deferred_acc': 0.015053763440860216, 'system_acc': 0.03}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.7775, 'classifier_nondeferred_acc': 0.036655948553054665, 'meta_deferred_acc': 0.015730337078651686, 'system_acc': 0.032}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.7875, 'classifier_nondeferred_acc': 0.03746031746031746, 'meta_deferred_acc': 0.011764705882352941, 'system_acc': 0.032}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.798, 'classifier_nondeferred_acc': 0.03884711779448621, 'meta_deferred_acc': 0.012376237623762377, 'system_acc': 0.0335}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.808, 'classifier_nondeferred_acc': 0.040222772277227724, 'meta_deferred_acc': 0.010416666666666666, 'system_acc': 0.0345}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.8180000000000001, 'classifier_nondeferred_acc': 0.04095354523227384, 'meta_deferred_acc': 0.005494505494505495, 'system_acc': 0.0345}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.8280000000000001, 'classifier_nondeferred_acc': 0.042874396135265704, 'meta_deferred_acc': 0.0, 'system_acc': 0.0355}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.838, 'classifier_nondeferred_acc': 0.04355608591885442, 'meta_deferred_acc': 0.0, 'system_acc': 0.0365}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.8485, 'classifier_nondeferred_acc': 0.04537418974661167, 'meta_deferred_acc': 0.0, 'system_acc': 0.0385}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.8585, 'classifier_nondeferred_acc': 0.046592894583576, 'meta_deferred_acc': 0.0, 'system_acc': 0.04}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.8685, 'classifier_nondeferred_acc': 0.046632124352331605, 'meta_deferred_acc': 0.0, 'system_acc': 0.0405}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.8785000000000001, 'classifier_nondeferred_acc': 0.04610130904951622, 'meta_deferred_acc': 0.0, 'system_acc': 0.0405}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.8885, 'classifier_nondeferred_acc': 0.04614518851997749, 'meta_deferred_acc': 0.0, 'system_acc': 0.041}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.899, 'classifier_nondeferred_acc': 0.04560622914349277, 'meta_deferred_acc': 0.0, 'system_acc': 0.041}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.909, 'classifier_nondeferred_acc': 0.04565456545654566, 'meta_deferred_acc': 0.0, 'system_acc': 0.0415}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.919, 'classifier_nondeferred_acc': 0.04570184983677911, 'meta_deferred_acc': 0.0, 'system_acc': 0.042}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.929, 'classifier_nondeferred_acc': 0.04520990312163617, 'meta_deferred_acc': 0.0, 'system_acc': 0.042}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.9390000000000001, 'classifier_nondeferred_acc': 0.045260915867944625, 'meta_deferred_acc': 0.0, 'system_acc': 0.0425}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.9495, 'classifier_nondeferred_acc': 0.04528699315429173, 'meta_deferred_acc': 0.0, 'system_acc': 0.043}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.9595, 'classifier_nondeferred_acc': 0.04637832204273059, 'meta_deferred_acc': 0.0, 'system_acc': 0.0445}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.9695, 'classifier_nondeferred_acc': 0.04693140794223827, 'meta_deferred_acc': 0.0, 'system_acc': 0.0455}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.9795, 'classifier_nondeferred_acc': 0.04696273608984176, 'meta_deferred_acc': 0.0, 'system_acc': 0.046}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 0.9895, 'classifier_nondeferred_acc': 0.046488125315816066, 'meta_deferred_acc': 0.0, 'system_acc': 0.046}, {'classifier_all_acc': 0.0465, 'meta_all_acc': 0.035, 'coverage': 1.0, 'classifier_nondeferred_acc': 0.0465, 'meta_deferred_acc': nan, 'system_acc': 0.0465}], [{'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.0, 'classifier_nondeferred_acc': nan, 'human_deferred_acc': 0.949, 'system_acc': 0.949}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.0004999999999999449, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9489744872436218, 'system_acc': 0.9485}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.010499999999999954, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9484588175846387, 'system_acc': 0.9385}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.020499999999999963, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9479326186830015, 'system_acc': 0.9285}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.03049999999999997, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9479112944816916, 'system_acc': 0.919}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.04049999999999998, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9473684210526315, 'system_acc': 0.909}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.05049999999999999, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9478672985781991, 'system_acc': 0.9}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.061000000000000054, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9483493077742279, 'system_acc': 0.8905}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.07099999999999995, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9477933261571583, 'system_acc': 0.8805}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.08099999999999996, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9472252448313384, 'system_acc': 0.8705}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.09099999999999997, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9466446644664467, 'system_acc': 0.8605}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.10099999999999998, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9460511679644049, 'system_acc': 0.8505}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.11150000000000004, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9459763646595385, 'system_acc': 0.8405}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.12150000000000005, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9464997154240182, 'system_acc': 0.8315}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.13149999999999995, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9458837075417387, 'system_acc': 0.8215}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.14149999999999996, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9458357600465929, 'system_acc': 0.812}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.15149999999999997, 'classifier_nondeferred_acc': 0.0033003300330033004, 'human_deferred_acc': 0.9457866823806718, 'system_acc': 0.803}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.16200000000000003, 'classifier_nondeferred_acc': 0.0030864197530864196, 'human_deferred_acc': 0.9451073985680191, 'system_acc': 0.7925}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.17200000000000004, 'classifier_nondeferred_acc': 0.0029069767441860465, 'human_deferred_acc': 0.9450483091787439, 'system_acc': 0.783}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.18200000000000005, 'classifier_nondeferred_acc': 0.0027472527472527475, 'human_deferred_acc': 0.9449877750611247, 'system_acc': 0.7735}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.19199999999999995, 'classifier_nondeferred_acc': 0.005208333333333333, 'human_deferred_acc': 0.9449257425742574, 'system_acc': 0.7645}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.20199999999999996, 'classifier_nondeferred_acc': 0.012376237623762377, 'human_deferred_acc': 0.9442355889724311, 'system_acc': 0.756}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.21250000000000002, 'classifier_nondeferred_acc': 0.011764705882352941, 'human_deferred_acc': 0.9441269841269841, 'system_acc': 0.746}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.22250000000000003, 'classifier_nondeferred_acc': 0.011235955056179775, 'human_deferred_acc': 0.9434083601286174, 'system_acc': 0.736}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.23250000000000004, 'classifier_nondeferred_acc': 0.010752688172043012, 'human_deferred_acc': 0.9426710097719869, 'system_acc': 0.726}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.24250000000000005, 'classifier_nondeferred_acc': 0.012371134020618556, 'human_deferred_acc': 0.9432343234323433, 'system_acc': 0.7175}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.25249999999999995, 'classifier_nondeferred_acc': 0.011881188118811881, 'human_deferred_acc': 0.9431438127090301, 'system_acc': 0.708}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.26249999999999996, 'classifier_nondeferred_acc': 0.017142857142857144, 'human_deferred_acc': 0.9430508474576271, 'system_acc': 0.7}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.273, 'classifier_nondeferred_acc': 0.016483516483516484, 'human_deferred_acc': 0.9429160935350757, 'system_acc': 0.69}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.28300000000000003, 'classifier_nondeferred_acc': 0.0176678445229682, 'human_deferred_acc': 0.9421199442119944, 'system_acc': 0.6805}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.29300000000000004, 'classifier_nondeferred_acc': 0.01877133105802048, 'human_deferred_acc': 0.9413012729844413, 'system_acc': 0.671}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.30300000000000005, 'classifier_nondeferred_acc': 0.019801980198019802, 'human_deferred_acc': 0.9404591104734576, 'system_acc': 0.6615}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.31299999999999994, 'classifier_nondeferred_acc': 0.023961661341853034, 'human_deferred_acc': 0.9403202328966521, 'system_acc': 0.6535}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.3235, 'classifier_nondeferred_acc': 0.023183925811437404, 'human_deferred_acc': 0.9393939393939394, 'system_acc': 0.643}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.3335, 'classifier_nondeferred_acc': 0.0239880059970015, 'human_deferred_acc': 0.9399849962490623, 'system_acc': 0.6345}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.3435, 'classifier_nondeferred_acc': 0.024745269286754003, 'human_deferred_acc': 0.9398324447829398, 'system_acc': 0.6255}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.35350000000000004, 'classifier_nondeferred_acc': 0.026874115983026876, 'human_deferred_acc': 0.9389017788089714, 'system_acc': 0.6165}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.36350000000000005, 'classifier_nondeferred_acc': 0.030261348005502064, 'human_deferred_acc': 0.9387274155538099, 'system_acc': 0.6085}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.374, 'classifier_nondeferred_acc': 0.03342245989304813, 'human_deferred_acc': 0.9376996805111821, 'system_acc': 0.5995}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.384, 'classifier_nondeferred_acc': 0.036458333333333336, 'human_deferred_acc': 0.9366883116883117, 'system_acc': 0.591}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.394, 'classifier_nondeferred_acc': 0.03934010152284264, 'human_deferred_acc': 0.9356435643564357, 'system_acc': 0.5825}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.404, 'classifier_nondeferred_acc': 0.04207920792079208, 'human_deferred_acc': 0.9354026845637584, 'system_acc': 0.5745}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.41400000000000003, 'classifier_nondeferred_acc': 0.04589371980676329, 'human_deferred_acc': 0.9351535836177475, 'system_acc': 0.567}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.4245, 'classifier_nondeferred_acc': 0.048292108362779744, 'human_deferred_acc': 0.9357080799304952, 'system_acc': 0.559}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.4345, 'classifier_nondeferred_acc': 0.05178365937859609, 'human_deferred_acc': 0.9345711759504863, 'system_acc': 0.551}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.4445, 'classifier_nondeferred_acc': 0.052868391451068614, 'human_deferred_acc': 0.9351935193519352, 'system_acc': 0.543}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.4545, 'classifier_nondeferred_acc': 0.052805280528052806, 'human_deferred_acc': 0.9349220898258478, 'system_acc': 0.534}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.4645, 'classifier_nondeferred_acc': 0.05489773950484392, 'human_deferred_acc': 0.9337068160597572, 'system_acc': 0.5255}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.475, 'classifier_nondeferred_acc': 0.05789473684210526, 'human_deferred_acc': 0.9342857142857143, 'system_acc': 0.518}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.485, 'classifier_nondeferred_acc': 0.058762886597938144, 'human_deferred_acc': 0.9339805825242719, 'system_acc': 0.5095}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.495, 'classifier_nondeferred_acc': 0.06060606060606061, 'human_deferred_acc': 0.9346534653465347, 'system_acc': 0.502}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.505, 'classifier_nondeferred_acc': 0.061386138613861385, 'human_deferred_acc': 0.9343434343434344, 'system_acc': 0.4935}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.515, 'classifier_nondeferred_acc': 0.06310679611650485, 'human_deferred_acc': 0.9329896907216495, 'system_acc': 0.485}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.525, 'classifier_nondeferred_acc': 0.06571428571428571, 'human_deferred_acc': 0.9336842105263158, 'system_acc': 0.478}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.5355, 'classifier_nondeferred_acc': 0.06722689075630252, 'human_deferred_acc': 0.9321851453175457, 'system_acc': 0.469}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.5455, 'classifier_nondeferred_acc': 0.06966086159486709, 'human_deferred_acc': 0.9328932893289329, 'system_acc': 0.462}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.5555, 'classifier_nondeferred_acc': 0.0711071107110711, 'human_deferred_acc': 0.9325084364454443, 'system_acc': 0.454}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.5655, 'classifier_nondeferred_acc': 0.07338638373121131, 'human_deferred_acc': 0.9321058688147296, 'system_acc': 0.4465}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.5755, 'classifier_nondeferred_acc': 0.0738488271068636, 'human_deferred_acc': 0.9316843345111896, 'system_acc': 0.438}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.5860000000000001, 'classifier_nondeferred_acc': 0.07593856655290103, 'human_deferred_acc': 0.9299516908212561, 'system_acc': 0.4295}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.596, 'classifier_nondeferred_acc': 0.07718120805369127, 'human_deferred_acc': 0.9306930693069307, 'system_acc': 0.422}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.606, 'classifier_nondeferred_acc': 0.07920792079207921, 'human_deferred_acc': 0.9302030456852792, 'system_acc': 0.4145}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.616, 'classifier_nondeferred_acc': 0.07873376623376624, 'human_deferred_acc': 0.9322916666666666, 'system_acc': 0.4065}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.626, 'classifier_nondeferred_acc': 0.07907348242811502, 'human_deferred_acc': 0.93048128342246, 'system_acc': 0.3975}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.6365000000000001, 'classifier_nondeferred_acc': 0.0816967792615868, 'human_deferred_acc': 0.9312242090784044, 'system_acc': 0.3905}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.6465000000000001, 'classifier_nondeferred_acc': 0.08352668213457076, 'human_deferred_acc': 0.9292786421499293, 'system_acc': 0.3825}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.6565, 'classifier_nondeferred_acc': 0.08453922315308454, 'human_deferred_acc': 0.9272197962154294, 'system_acc': 0.374}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.6665, 'classifier_nondeferred_acc': 0.08477119279819954, 'human_deferred_acc': 0.9265367316341829, 'system_acc': 0.3655}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.6765, 'classifier_nondeferred_acc': 0.08573540280857354, 'human_deferred_acc': 0.9258114374034003, 'system_acc': 0.3575}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.687, 'classifier_nondeferred_acc': 0.08660844250363901, 'human_deferred_acc': 0.9233226837060703, 'system_acc': 0.3485}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.6970000000000001, 'classifier_nondeferred_acc': 0.08536585365853659, 'human_deferred_acc': 0.9224422442244224, 'system_acc': 0.339}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.7070000000000001, 'classifier_nondeferred_acc': 0.086987270155587, 'human_deferred_acc': 0.9232081911262798, 'system_acc': 0.332}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.7170000000000001, 'classifier_nondeferred_acc': 0.08577405857740586, 'human_deferred_acc': 0.9240282685512368, 'system_acc': 0.323}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.727, 'classifier_nondeferred_acc': 0.0873452544704264, 'human_deferred_acc': 0.9230769230769231, 'system_acc': 0.3155}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.7375, 'classifier_nondeferred_acc': 0.08949152542372882, 'human_deferred_acc': 0.9219047619047619, 'system_acc': 0.308}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.7475, 'classifier_nondeferred_acc': 0.09230769230769231, 'human_deferred_acc': 0.9188118811881189, 'system_acc': 0.301}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.7575000000000001, 'classifier_nondeferred_acc': 0.09108910891089109, 'human_deferred_acc': 0.9195876288659793, 'system_acc': 0.292}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.7675, 'classifier_nondeferred_acc': 0.09315960912052117, 'human_deferred_acc': 0.9182795698924732, 'system_acc': 0.285}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.7775, 'classifier_nondeferred_acc': 0.09646302250803858, 'human_deferred_acc': 0.9213483146067416, 'system_acc': 0.28}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.7875, 'classifier_nondeferred_acc': 0.09904761904761905, 'human_deferred_acc': 0.92, 'system_acc': 0.2735}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.798, 'classifier_nondeferred_acc': 0.10150375939849623, 'human_deferred_acc': 0.9183168316831684, 'system_acc': 0.2665}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.808, 'classifier_nondeferred_acc': 0.10396039603960396, 'human_deferred_acc': 0.9244791666666666, 'system_acc': 0.2615}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.8180000000000001, 'classifier_nondeferred_acc': 0.10513447432762836, 'human_deferred_acc': 0.9203296703296703, 'system_acc': 0.2535}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.8280000000000001, 'classifier_nondeferred_acc': 0.10809178743961352, 'human_deferred_acc': 0.9244186046511628, 'system_acc': 0.2485}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.838, 'classifier_nondeferred_acc': 0.10918854415274463, 'human_deferred_acc': 0.9228395061728395, 'system_acc': 0.241}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.8485, 'classifier_nondeferred_acc': 0.11137301119622864, 'human_deferred_acc': 0.9207920792079208, 'system_acc': 0.234}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.8585, 'classifier_nondeferred_acc': 0.11124053581828772, 'human_deferred_acc': 0.9222614840989399, 'system_acc': 0.226}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.8685, 'classifier_nondeferred_acc': 0.11168681635002879, 'human_deferred_acc': 0.9239543726235742, 'system_acc': 0.2185}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.8785000000000001, 'classifier_nondeferred_acc': 0.11212293682413205, 'human_deferred_acc': 0.9382716049382716, 'system_acc': 0.2125}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.8885, 'classifier_nondeferred_acc': 0.11311198649409117, 'human_deferred_acc': 0.9461883408071748, 'system_acc': 0.206}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.899, 'classifier_nondeferred_acc': 0.11457174638487208, 'human_deferred_acc': 0.9504950495049505, 'system_acc': 0.199}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.909, 'classifier_nondeferred_acc': 0.11716171617161716, 'human_deferred_acc': 0.9560439560439561, 'system_acc': 0.1935}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.919, 'classifier_nondeferred_acc': 0.12132752992383025, 'human_deferred_acc': 0.9506172839506173, 'system_acc': 0.1885}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.929, 'classifier_nondeferred_acc': 0.1232508073196986, 'human_deferred_acc': 0.9577464788732394, 'system_acc': 0.1825}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.9390000000000001, 'classifier_nondeferred_acc': 0.1288604898828541, 'human_deferred_acc': 0.9508196721311475, 'system_acc': 0.179}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.9495, 'classifier_nondeferred_acc': 0.13375460768825698, 'human_deferred_acc': 0.9702970297029703, 'system_acc': 0.176}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.9595, 'classifier_nondeferred_acc': 0.14174048983845752, 'human_deferred_acc': 0.9629629629629629, 'system_acc': 0.175}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.9695, 'classifier_nondeferred_acc': 0.14853017019082002, 'human_deferred_acc': 0.9672131147540983, 'system_acc': 0.1735}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.9795, 'classifier_nondeferred_acc': 0.15569167942827974, 'human_deferred_acc': 0.9512195121951219, 'system_acc': 0.172}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 0.9895, 'classifier_nondeferred_acc': 0.16270843860535625, 'human_deferred_acc': 1.0, 'system_acc': 0.1715}, {'classifier_all_acc': 0.171, 'human_all_acc': 0.949, 'coverage': 1.0, 'classifier_nondeferred_acc': 0.171, 'human_deferred_acc': nan, 'system_acc': 0.171}], [{'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.121, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9488054607508533, 'system_acc': 0.834}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.0004999999999999449, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9489744872436218, 'system_acc': 0.9485}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.010499999999999954, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9484588175846387, 'system_acc': 0.9385}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.020499999999999963, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9479326186830015, 'system_acc': 0.9285}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.03049999999999997, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9473955647240846, 'system_acc': 0.9185}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.04049999999999998, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9478895257946848, 'system_acc': 0.9095}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.05049999999999999, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9483938915218536, 'system_acc': 0.9005}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.061000000000000054, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9478168264110756, 'system_acc': 0.89}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.07099999999999995, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9477933261571583, 'system_acc': 0.8805}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.08099999999999996, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9472252448313384, 'system_acc': 0.8705}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.09099999999999997, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9471947194719472, 'system_acc': 0.861}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.10099999999999998, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9477196885428254, 'system_acc': 0.852}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.11150000000000004, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9482273494653911, 'system_acc': 0.8425}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.12150000000000005, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9487763232783153, 'system_acc': 0.8335}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.13149999999999995, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.948762233736327, 'system_acc': 0.824}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.14149999999999996, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9487478159580663, 'system_acc': 0.8145}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.15149999999999997, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9499116087212728, 'system_acc': 0.806}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.16200000000000003, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9492840095465394, 'system_acc': 0.7955}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.17200000000000004, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9486714975845411, 'system_acc': 0.7855}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.18200000000000005, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9486552567237164, 'system_acc': 0.776}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.19199999999999995, 'classifier_nondeferred_acc': 0.0026041666666666665, 'human_deferred_acc': 0.9492574257425742, 'system_acc': 0.7675}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.20199999999999996, 'classifier_nondeferred_acc': 0.0024752475247524753, 'human_deferred_acc': 0.949874686716792, 'system_acc': 0.7585}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.21250000000000002, 'classifier_nondeferred_acc': 0.004705882352941176, 'human_deferred_acc': 0.9498412698412698, 'system_acc': 0.749}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.22250000000000003, 'classifier_nondeferred_acc': 0.008988764044943821, 'human_deferred_acc': 0.9504823151125402, 'system_acc': 0.741}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.23250000000000004, 'classifier_nondeferred_acc': 0.008602150537634409, 'human_deferred_acc': 0.9511400651465798, 'system_acc': 0.732}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.24250000000000005, 'classifier_nondeferred_acc': 0.008247422680412371, 'human_deferred_acc': 0.9511551155115512, 'system_acc': 0.7225}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.25249999999999995, 'classifier_nondeferred_acc': 0.007920792079207921, 'human_deferred_acc': 0.9518394648829431, 'system_acc': 0.7135}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.26249999999999996, 'classifier_nondeferred_acc': 0.007619047619047619, 'human_deferred_acc': 0.9511864406779661, 'system_acc': 0.7035}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.273, 'classifier_nondeferred_acc': 0.009157509157509158, 'human_deferred_acc': 0.9511691884456671, 'system_acc': 0.694}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.28300000000000003, 'classifier_nondeferred_acc': 0.0088339222614841, 'human_deferred_acc': 0.9525801952580195, 'system_acc': 0.6855}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.29300000000000004, 'classifier_nondeferred_acc': 0.008532423208191127, 'human_deferred_acc': 0.954031117397454, 'system_acc': 0.677}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.30300000000000005, 'classifier_nondeferred_acc': 0.00825082508250825, 'human_deferred_acc': 0.9533715925394548, 'system_acc': 0.667}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.31299999999999994, 'classifier_nondeferred_acc': 0.007987220447284345, 'human_deferred_acc': 0.9534206695778749, 'system_acc': 0.6575}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.3235, 'classifier_nondeferred_acc': 0.0077279752704791345, 'human_deferred_acc': 0.9526977087952697, 'system_acc': 0.647}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.3335, 'classifier_nondeferred_acc': 0.0074962518740629685, 'human_deferred_acc': 0.9534883720930233, 'system_acc': 0.638}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.3435, 'classifier_nondeferred_acc': 0.00727802037845706, 'human_deferred_acc': 0.9535415079969536, 'system_acc': 0.6285}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.35350000000000004, 'classifier_nondeferred_acc': 0.008486562942008486, 'human_deferred_acc': 0.9551430781129157, 'system_acc': 0.6205}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.36350000000000005, 'classifier_nondeferred_acc': 0.009628610729023384, 'human_deferred_acc': 0.9544383346425765, 'system_acc': 0.611}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.374, 'classifier_nondeferred_acc': 0.009358288770053475, 'human_deferred_acc': 0.9552715654952076, 'system_acc': 0.6015}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.384, 'classifier_nondeferred_acc': 0.009114583333333334, 'human_deferred_acc': 0.9561688311688312, 'system_acc': 0.5925}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.394, 'classifier_nondeferred_acc': 0.008883248730964468, 'human_deferred_acc': 0.9562706270627063, 'system_acc': 0.583}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.404, 'classifier_nondeferred_acc': 0.009900990099009901, 'human_deferred_acc': 0.9572147651006712, 'system_acc': 0.5745}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.41400000000000003, 'classifier_nondeferred_acc': 0.00966183574879227, 'human_deferred_acc': 0.9564846416382252, 'system_acc': 0.5645}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.4245, 'classifier_nondeferred_acc': 0.009422850412249705, 'human_deferred_acc': 0.9565595134665508, 'system_acc': 0.5545}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.4345, 'classifier_nondeferred_acc': 0.010356731875719217, 'human_deferred_acc': 0.9557913351016799, 'system_acc': 0.545}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.4445, 'classifier_nondeferred_acc': 0.010123734533183352, 'human_deferred_acc': 0.954995499549955, 'system_acc': 0.535}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.4545, 'classifier_nondeferred_acc': 0.009900990099009901, 'human_deferred_acc': 0.9550870760769936, 'system_acc': 0.5255}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.4645, 'classifier_nondeferred_acc': 0.00968783638320775, 'human_deferred_acc': 0.954248366013072, 'system_acc': 0.5155}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.475, 'classifier_nondeferred_acc': 0.010526315789473684, 'human_deferred_acc': 0.9542857142857143, 'system_acc': 0.506}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.485, 'classifier_nondeferred_acc': 0.010309278350515464, 'human_deferred_acc': 0.9533980582524272, 'system_acc': 0.496}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.495, 'classifier_nondeferred_acc': 0.010101010101010102, 'human_deferred_acc': 0.9534653465346534, 'system_acc': 0.4865}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.505, 'classifier_nondeferred_acc': 0.009900990099009901, 'human_deferred_acc': 0.9525252525252526, 'system_acc': 0.4765}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.515, 'classifier_nondeferred_acc': 0.009708737864077669, 'human_deferred_acc': 0.9515463917525773, 'system_acc': 0.4665}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.525, 'classifier_nondeferred_acc': 0.009523809523809525, 'human_deferred_acc': 0.9505263157894737, 'system_acc': 0.4565}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.5355, 'classifier_nondeferred_acc': 0.009337068160597572, 'human_deferred_acc': 0.9494079655543596, 'system_acc': 0.446}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.5455, 'classifier_nondeferred_acc': 0.010999083409715857, 'human_deferred_acc': 0.9504950495049505, 'system_acc': 0.438}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.5555, 'classifier_nondeferred_acc': 0.011701170117011701, 'human_deferred_acc': 0.952755905511811, 'system_acc': 0.43}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.5655, 'classifier_nondeferred_acc': 0.01237842617152962, 'human_deferred_acc': 0.953970080552359, 'system_acc': 0.4215}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.5755, 'classifier_nondeferred_acc': 0.01216333622936577, 'human_deferred_acc': 0.9552414605418139, 'system_acc': 0.4125}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.5860000000000001, 'classifier_nondeferred_acc': 0.012798634812286689, 'human_deferred_acc': 0.9577294685990339, 'system_acc': 0.404}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.596, 'classifier_nondeferred_acc': 0.012583892617449664, 'human_deferred_acc': 0.9566831683168316, 'system_acc': 0.394}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.606, 'classifier_nondeferred_acc': 0.014026402640264026, 'human_deferred_acc': 0.9568527918781726, 'system_acc': 0.3855}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.616, 'classifier_nondeferred_acc': 0.01461038961038961, 'human_deferred_acc': 0.9557291666666666, 'system_acc': 0.376}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.626, 'classifier_nondeferred_acc': 0.016773162939297124, 'human_deferred_acc': 0.9572192513368984, 'system_acc': 0.3685}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.6365000000000001, 'classifier_nondeferred_acc': 0.016496465043205028, 'human_deferred_acc': 0.9573590096286108, 'system_acc': 0.3585}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.6465000000000001, 'classifier_nondeferred_acc': 0.017014694508894045, 'human_deferred_acc': 0.9575671852899575, 'system_acc': 0.3495}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.6565, 'classifier_nondeferred_acc': 0.017517136329017517, 'human_deferred_acc': 0.9563318777292577, 'system_acc': 0.34}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.6665, 'classifier_nondeferred_acc': 0.018754688672168042, 'human_deferred_acc': 0.95952023988006, 'system_acc': 0.3325}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.6765, 'classifier_nondeferred_acc': 0.018477457501847747, 'human_deferred_acc': 0.9629057187017002, 'system_acc': 0.324}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.687, 'classifier_nondeferred_acc': 0.020378457059679767, 'human_deferred_acc': 0.963258785942492, 'system_acc': 0.3155}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.6970000000000001, 'classifier_nondeferred_acc': 0.02223816355810617, 'human_deferred_acc': 0.9620462046204621, 'system_acc': 0.307}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.7070000000000001, 'classifier_nondeferred_acc': 0.024752475247524754, 'human_deferred_acc': 0.9675767918088737, 'system_acc': 0.301}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.7170000000000001, 'classifier_nondeferred_acc': 0.02580195258019526, 'human_deferred_acc': 0.9681978798586572, 'system_acc': 0.2925}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.727, 'classifier_nondeferred_acc': 0.026822558459422285, 'human_deferred_acc': 0.9688644688644689, 'system_acc': 0.284}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.7375, 'classifier_nondeferred_acc': 0.029152542372881354, 'human_deferred_acc': 0.9676190476190476, 'system_acc': 0.2755}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.7475, 'classifier_nondeferred_acc': 0.030100334448160536, 'human_deferred_acc': 0.9722772277227723, 'system_acc': 0.268}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.7575000000000001, 'classifier_nondeferred_acc': 0.031023102310231022, 'human_deferred_acc': 0.977319587628866, 'system_acc': 0.2605}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.7675, 'classifier_nondeferred_acc': 0.03257328990228013, 'human_deferred_acc': 0.978494623655914, 'system_acc': 0.2525}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.7775, 'classifier_nondeferred_acc': 0.03536977491961415, 'human_deferred_acc': 0.9797752808988764, 'system_acc': 0.2455}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.7875, 'classifier_nondeferred_acc': 0.0380952380952381, 'human_deferred_acc': 0.9811764705882353, 'system_acc': 0.2385}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.798, 'classifier_nondeferred_acc': 0.040726817042606514, 'human_deferred_acc': 0.9826732673267327, 'system_acc': 0.231}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.808, 'classifier_nondeferred_acc': 0.04393564356435643, 'human_deferred_acc': 0.9817708333333334, 'system_acc': 0.224}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.8180000000000001, 'classifier_nondeferred_acc': 0.04706601466992665, 'human_deferred_acc': 0.9807692307692307, 'system_acc': 0.217}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.8280000000000001, 'classifier_nondeferred_acc': 0.05253623188405797, 'human_deferred_acc': 0.9825581395348837, 'system_acc': 0.2125}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.838, 'classifier_nondeferred_acc': 0.056682577565632455, 'human_deferred_acc': 0.9814814814814815, 'system_acc': 0.2065}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.8485, 'classifier_nondeferred_acc': 0.06069534472598703, 'human_deferred_acc': 0.9801980198019802, 'system_acc': 0.2}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.8585, 'classifier_nondeferred_acc': 0.06173558532323821, 'human_deferred_acc': 0.9787985865724381, 'system_acc': 0.1915}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.8685, 'classifier_nondeferred_acc': 0.06563039723661486, 'human_deferred_acc': 0.9771863117870723, 'system_acc': 0.1855}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.8785000000000001, 'classifier_nondeferred_acc': 0.0688673875924872, 'human_deferred_acc': 0.9753086419753086, 'system_acc': 0.179}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.8885, 'classifier_nondeferred_acc': 0.07203151378728194, 'human_deferred_acc': 0.9775784753363229, 'system_acc': 0.173}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.899, 'classifier_nondeferred_acc': 0.07563959955506118, 'human_deferred_acc': 0.9752475247524752, 'system_acc': 0.1665}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.909, 'classifier_nondeferred_acc': 0.07645764576457646, 'human_deferred_acc': 0.9725274725274725, 'system_acc': 0.158}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.919, 'classifier_nondeferred_acc': 0.07725788900979326, 'human_deferred_acc': 0.9753086419753086, 'system_acc': 0.15}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.929, 'classifier_nondeferred_acc': 0.07642626480086114, 'human_deferred_acc': 0.971830985915493, 'system_acc': 0.14}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.9390000000000001, 'classifier_nondeferred_acc': 0.07614483493077742, 'human_deferred_acc': 0.9672131147540983, 'system_acc': 0.1305}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.9495, 'classifier_nondeferred_acc': 0.07530279094260137, 'human_deferred_acc': 0.9801980198019802, 'system_acc': 0.121}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.9595, 'classifier_nondeferred_acc': 0.07451797811360084, 'human_deferred_acc': 0.9876543209876543, 'system_acc': 0.1115}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.9695, 'classifier_nondeferred_acc': 0.073749355337803, 'human_deferred_acc': 0.9836065573770492, 'system_acc': 0.1015}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.9795, 'classifier_nondeferred_acc': 0.07299642674834099, 'human_deferred_acc': 1.0, 'system_acc': 0.092}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 0.9895, 'classifier_nondeferred_acc': 0.07225871652349672, 'human_deferred_acc': 1.0, 'system_acc': 0.082}, {'classifier_all_acc': 0.0715, 'human_all_acc': 0.949, 'coverage': 1.0, 'classifier_nondeferred_acc': 0.0715, 'human_deferred_acc': nan, 'system_acc': 0.0715}], [{'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.904, 'classifier_nondeferred_acc': 0.00497787610619469, 'human_deferred_acc': 0.921875, 'system_acc': 0.093}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.0004999999999999449, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9489744872436218, 'system_acc': 0.9485}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.010499999999999954, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9484588175846387, 'system_acc': 0.9385}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.020499999999999963, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9479326186830015, 'system_acc': 0.9285}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.03049999999999997, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9479112944816916, 'system_acc': 0.919}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.04049999999999998, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9478895257946848, 'system_acc': 0.9095}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.05049999999999999, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9473407056345445, 'system_acc': 0.8995}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.061000000000000054, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.946751863684771, 'system_acc': 0.889}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.07099999999999995, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.946178686759957, 'system_acc': 0.879}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.08099999999999996, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9466811751904244, 'system_acc': 0.87}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.09099999999999997, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9460946094609461, 'system_acc': 0.86}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.10099999999999998, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9454949944382648, 'system_acc': 0.85}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.11150000000000004, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9448508722566122, 'system_acc': 0.8395}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.12150000000000005, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9442231075697212, 'system_acc': 0.8295}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.13149999999999995, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.943580886586068, 'system_acc': 0.8195}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.14149999999999996, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9435061153174141, 'system_acc': 0.81}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.15149999999999997, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9428403064230996, 'system_acc': 0.8}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.16200000000000003, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9421241050119332, 'system_acc': 0.7895}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.17200000000000004, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9414251207729468, 'system_acc': 0.7795}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.18200000000000005, 'classifier_nondeferred_acc': 0.0, 'human_deferred_acc': 0.9407090464547677, 'system_acc': 0.7695}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.19199999999999995, 'classifier_nondeferred_acc': 0.0026041666666666665, 'human_deferred_acc': 0.9399752475247525, 'system_acc': 0.76}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.20199999999999996, 'classifier_nondeferred_acc': 0.0024752475247524753, 'human_deferred_acc': 0.9398496240601504, 'system_acc': 0.7505}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.21250000000000002, 'classifier_nondeferred_acc': 0.002352941176470588, 'human_deferred_acc': 0.939047619047619, 'system_acc': 0.74}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.22250000000000003, 'classifier_nondeferred_acc': 0.0022471910112359553, 'human_deferred_acc': 0.9382636655948553, 'system_acc': 0.73}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.23250000000000004, 'classifier_nondeferred_acc': 0.002150537634408602, 'human_deferred_acc': 0.9374592833876222, 'system_acc': 0.72}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.24250000000000005, 'classifier_nondeferred_acc': 0.002061855670103093, 'human_deferred_acc': 0.9372937293729373, 'system_acc': 0.7105}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.25249999999999995, 'classifier_nondeferred_acc': 0.0019801980198019802, 'human_deferred_acc': 0.9364548494983278, 'system_acc': 0.7005}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.26249999999999996, 'classifier_nondeferred_acc': 0.0019047619047619048, 'human_deferred_acc': 0.9369491525423729, 'system_acc': 0.6915}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.273, 'classifier_nondeferred_acc': 0.0018315018315018315, 'human_deferred_acc': 0.9360385144429161, 'system_acc': 0.681}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.28300000000000003, 'classifier_nondeferred_acc': 0.0017667844522968198, 'human_deferred_acc': 0.9351464435146444, 'system_acc': 0.671}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.29300000000000004, 'classifier_nondeferred_acc': 0.0017064846416382253, 'human_deferred_acc': 0.9342291371994342, 'system_acc': 0.661}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.30300000000000005, 'classifier_nondeferred_acc': 0.0016501650165016502, 'human_deferred_acc': 0.9332855093256814, 'system_acc': 0.651}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.31299999999999994, 'classifier_nondeferred_acc': 0.001597444089456869, 'human_deferred_acc': 0.9323144104803494, 'system_acc': 0.641}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.3235, 'classifier_nondeferred_acc': 0.0015455950540958269, 'human_deferred_acc': 0.9312638580931264, 'system_acc': 0.6305}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.3335, 'classifier_nondeferred_acc': 0.0014992503748125937, 'human_deferred_acc': 0.9302325581395349, 'system_acc': 0.6205}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.3435, 'classifier_nondeferred_acc': 0.001455604075691412, 'human_deferred_acc': 0.9291698400609292, 'system_acc': 0.6105}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.35350000000000004, 'classifier_nondeferred_acc': 0.0014144271570014145, 'human_deferred_acc': 0.9288476411446249, 'system_acc': 0.601}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.36350000000000005, 'classifier_nondeferred_acc': 0.001375515818431912, 'human_deferred_acc': 0.9293008641005499, 'system_acc': 0.592}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.374, 'classifier_nondeferred_acc': 0.001336898395721925, 'human_deferred_acc': 0.9281150159744409, 'system_acc': 0.5815}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.384, 'classifier_nondeferred_acc': 0.0013020833333333333, 'human_deferred_acc': 0.9293831168831169, 'system_acc': 0.573}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.394, 'classifier_nondeferred_acc': 0.0012690355329949238, 'human_deferred_acc': 0.9282178217821783, 'system_acc': 0.563}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.404, 'classifier_nondeferred_acc': 0.0012376237623762376, 'human_deferred_acc': 0.927013422818792, 'system_acc': 0.553}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.41400000000000003, 'classifier_nondeferred_acc': 0.0012077294685990338, 'human_deferred_acc': 0.9266211604095563, 'system_acc': 0.5435}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.4245, 'classifier_nondeferred_acc': 0.001177856301531213, 'human_deferred_acc': 0.9270199826238054, 'system_acc': 0.534}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.4345, 'classifier_nondeferred_acc': 0.0011507479861910242, 'human_deferred_acc': 0.9266136162687887, 'system_acc': 0.5245}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.4445, 'classifier_nondeferred_acc': 0.0011248593925759281, 'human_deferred_acc': 0.9252925292529253, 'system_acc': 0.5145}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.4545, 'classifier_nondeferred_acc': 0.0022002200220022, 'human_deferred_acc': 0.925756186984418, 'system_acc': 0.506}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.4645, 'classifier_nondeferred_acc': 0.002152852529601722, 'human_deferred_acc': 0.9243697478991597, 'system_acc': 0.496}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.475, 'classifier_nondeferred_acc': 0.002105263157894737, 'human_deferred_acc': 0.9228571428571428, 'system_acc': 0.4855}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.485, 'classifier_nondeferred_acc': 0.003092783505154639, 'human_deferred_acc': 0.925242718446602, 'system_acc': 0.478}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.495, 'classifier_nondeferred_acc': 0.0030303030303030303, 'human_deferred_acc': 0.9247524752475248, 'system_acc': 0.4685}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.505, 'classifier_nondeferred_acc': 0.0029702970297029703, 'human_deferred_acc': 0.9242424242424242, 'system_acc': 0.459}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.515, 'classifier_nondeferred_acc': 0.002912621359223301, 'human_deferred_acc': 0.9237113402061856, 'system_acc': 0.4495}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.525, 'classifier_nondeferred_acc': 0.002857142857142857, 'human_deferred_acc': 0.9221052631578948, 'system_acc': 0.4395}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.5355, 'classifier_nondeferred_acc': 0.0028011204481792717, 'human_deferred_acc': 0.9203444564047363, 'system_acc': 0.429}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.5455, 'classifier_nondeferred_acc': 0.002749770852428964, 'human_deferred_acc': 0.9196919691969196, 'system_acc': 0.4195}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.5555, 'classifier_nondeferred_acc': 0.0027002700270027003, 'human_deferred_acc': 0.9201349831271091, 'system_acc': 0.4105}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.5655, 'classifier_nondeferred_acc': 0.002652519893899204, 'human_deferred_acc': 0.9217491369390104, 'system_acc': 0.402}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.5755, 'classifier_nondeferred_acc': 0.0026064291920069507, 'human_deferred_acc': 0.9210836277974087, 'system_acc': 0.3925}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.5860000000000001, 'classifier_nondeferred_acc': 0.002559726962457338, 'human_deferred_acc': 0.9214975845410628, 'system_acc': 0.383}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.596, 'classifier_nondeferred_acc': 0.0025167785234899327, 'human_deferred_acc': 0.9220297029702971, 'system_acc': 0.374}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.606, 'classifier_nondeferred_acc': 0.0033003300330033004, 'human_deferred_acc': 0.9213197969543148, 'system_acc': 0.365}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.616, 'classifier_nondeferred_acc': 0.003246753246753247, 'human_deferred_acc': 0.9205729166666666, 'system_acc': 0.3555}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.626, 'classifier_nondeferred_acc': 0.003194888178913738, 'human_deferred_acc': 0.9197860962566845, 'system_acc': 0.346}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.6365000000000001, 'classifier_nondeferred_acc': 0.003927729772191673, 'human_deferred_acc': 0.9174690508940853, 'system_acc': 0.336}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.6465000000000001, 'classifier_nondeferred_acc': 0.0038669760247486465, 'human_deferred_acc': 0.9151343705799151, 'system_acc': 0.326}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.6565, 'classifier_nondeferred_acc': 0.005331302361005331, 'human_deferred_acc': 0.9170305676855895, 'system_acc': 0.3185}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.6665, 'classifier_nondeferred_acc': 0.005251312828207052, 'human_deferred_acc': 0.9205397301349325, 'system_acc': 0.3105}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.6765, 'classifier_nondeferred_acc': 0.005173688100517369, 'human_deferred_acc': 0.9227202472952086, 'system_acc': 0.302}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.687, 'classifier_nondeferred_acc': 0.005094614264919942, 'human_deferred_acc': 0.9217252396166135, 'system_acc': 0.292}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.6970000000000001, 'classifier_nondeferred_acc': 0.005021520803443328, 'human_deferred_acc': 0.9207920792079208, 'system_acc': 0.2825}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.7070000000000001, 'classifier_nondeferred_acc': 0.0049504950495049506, 'human_deferred_acc': 0.9232081911262798, 'system_acc': 0.274}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.7170000000000001, 'classifier_nondeferred_acc': 0.0048814504881450485, 'human_deferred_acc': 0.9257950530035336, 'system_acc': 0.2655}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.727, 'classifier_nondeferred_acc': 0.005502063273727648, 'human_deferred_acc': 0.9230769230769231, 'system_acc': 0.256}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.7375, 'classifier_nondeferred_acc': 0.005423728813559322, 'human_deferred_acc': 0.9238095238095239, 'system_acc': 0.2465}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.7475, 'classifier_nondeferred_acc': 0.005351170568561873, 'human_deferred_acc': 0.9227722772277228, 'system_acc': 0.237}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.7575000000000001, 'classifier_nondeferred_acc': 0.005940594059405941, 'human_deferred_acc': 0.9257731958762887, 'system_acc': 0.229}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.7675, 'classifier_nondeferred_acc': 0.005863192182410423, 'human_deferred_acc': 0.9268817204301075, 'system_acc': 0.22}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.7775, 'classifier_nondeferred_acc': 0.005787781350482315, 'human_deferred_acc': 0.9303370786516854, 'system_acc': 0.2115}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.7875, 'classifier_nondeferred_acc': 0.005714285714285714, 'human_deferred_acc': 0.9270588235294117, 'system_acc': 0.2015}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.798, 'classifier_nondeferred_acc': 0.005639097744360902, 'human_deferred_acc': 0.9356435643564357, 'system_acc': 0.1935}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.808, 'classifier_nondeferred_acc': 0.005569306930693069, 'human_deferred_acc': 0.9375, 'system_acc': 0.1845}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.8180000000000001, 'classifier_nondeferred_acc': 0.005501222493887531, 'human_deferred_acc': 0.9368131868131868, 'system_acc': 0.175}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.8280000000000001, 'classifier_nondeferred_acc': 0.005434782608695652, 'human_deferred_acc': 0.9331395348837209, 'system_acc': 0.165}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.838, 'classifier_nondeferred_acc': 0.0053699284009546535, 'human_deferred_acc': 0.9290123456790124, 'system_acc': 0.155}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.8485, 'classifier_nondeferred_acc': 0.005303476723629935, 'human_deferred_acc': 0.9273927392739274, 'system_acc': 0.145}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.8585, 'classifier_nondeferred_acc': 0.0052417006406523005, 'human_deferred_acc': 0.9222614840989399, 'system_acc': 0.135}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.8685, 'classifier_nondeferred_acc': 0.0051813471502590676, 'human_deferred_acc': 0.9239543726235742, 'system_acc': 0.126}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.8785000000000001, 'classifier_nondeferred_acc': 0.005122367672168469, 'human_deferred_acc': 0.9300411522633745, 'system_acc': 0.1175}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.8885, 'classifier_nondeferred_acc': 0.005064715813168261, 'human_deferred_acc': 0.9282511210762332, 'system_acc': 0.108}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.899, 'classifier_nondeferred_acc': 0.005005561735261402, 'human_deferred_acc': 0.9257425742574258, 'system_acc': 0.098}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.909, 'classifier_nondeferred_acc': 0.0049504950495049506, 'human_deferred_acc': 0.9285714285714286, 'system_acc': 0.089}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.919, 'classifier_nondeferred_acc': 0.004896626768226333, 'human_deferred_acc': 0.9197530864197531, 'system_acc': 0.079}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.929, 'classifier_nondeferred_acc': 0.004843918191603875, 'human_deferred_acc': 0.9084507042253521, 'system_acc': 0.069}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.9390000000000001, 'classifier_nondeferred_acc': 0.004792332268370607, 'human_deferred_acc': 0.9180327868852459, 'system_acc': 0.0605}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.9495, 'classifier_nondeferred_acc': 0.004739336492890996, 'human_deferred_acc': 0.9207920792079208, 'system_acc': 0.051}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.9595, 'classifier_nondeferred_acc': 0.005211047420531527, 'human_deferred_acc': 0.9382716049382716, 'system_acc': 0.043}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.9695, 'classifier_nondeferred_acc': 0.005157297576070139, 'human_deferred_acc': 0.9344262295081968, 'system_acc': 0.0335}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.9795, 'classifier_nondeferred_acc': 0.005104645227156712, 'human_deferred_acc': 0.975609756097561, 'system_acc': 0.025}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 0.9895, 'classifier_nondeferred_acc': 0.005053057099545225, 'human_deferred_acc': 0.9523809523809523, 'system_acc': 0.015}, {'classifier_all_acc': 0.005, 'human_all_acc': 0.949, 'coverage': 1.0, 'classifier_nondeferred_acc': 0.005, 'human_deferred_acc': nan, 'system_acc': 0.005}], [{'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.8775, 'classifier_nondeferred_acc': 0.10826210826210826, 'human_deferred_acc': 0.9591836734693877, 'system_acc': 0.2125}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.0004999999999999449, 'classifier_nondeferred_acc': 1.0, 'human_deferred_acc': 0.9489744872436218, 'system_acc': 0.949}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.010499999999999954, 'classifier_nondeferred_acc': 0.6190476190476191, 'human_deferred_acc': 0.9484588175846387, 'system_acc': 0.945}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.020499999999999963, 'classifier_nondeferred_acc': 0.6341463414634146, 'human_deferred_acc': 0.9479326186830015, 'system_acc': 0.9415}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.03049999999999997, 'classifier_nondeferred_acc': 0.5901639344262295, 'human_deferred_acc': 0.9484270242392986, 'system_acc': 0.9375}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.04049999999999998, 'classifier_nondeferred_acc': 0.5308641975308642, 'human_deferred_acc': 0.948931735278791, 'system_acc': 0.932}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.05049999999999999, 'classifier_nondeferred_acc': 0.5346534653465347, 'human_deferred_acc': 0.9489204844655081, 'system_acc': 0.928}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.061000000000000054, 'classifier_nondeferred_acc': 0.5081967213114754, 'human_deferred_acc': 0.9494142705005325, 'system_acc': 0.9225}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.07099999999999995, 'classifier_nondeferred_acc': 0.4647887323943662, 'human_deferred_acc': 0.9494079655543596, 'system_acc': 0.915}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.08099999999999996, 'classifier_nondeferred_acc': 0.42592592592592593, 'human_deferred_acc': 0.9488574537540805, 'system_acc': 0.9065}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.09099999999999997, 'classifier_nondeferred_acc': 0.4065934065934066, 'human_deferred_acc': 0.9488448844884488, 'system_acc': 0.8995}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.10099999999999998, 'classifier_nondeferred_acc': 0.3811881188118812, 'human_deferred_acc': 0.9488320355951056, 'system_acc': 0.8915}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.11150000000000004, 'classifier_nondeferred_acc': 0.3632286995515695, 'human_deferred_acc': 0.9493528418683174, 'system_acc': 0.884}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.12150000000000005, 'classifier_nondeferred_acc': 0.3497942386831276, 'human_deferred_acc': 0.9493454752418896, 'system_acc': 0.8765}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.13149999999999995, 'classifier_nondeferred_acc': 0.33079847908745247, 'human_deferred_acc': 0.9493379389752447, 'system_acc': 0.868}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.14149999999999996, 'classifier_nondeferred_acc': 0.31448763250883394, 'human_deferred_acc': 0.9487478159580663, 'system_acc': 0.859}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.15149999999999997, 'classifier_nondeferred_acc': 0.30363036303630364, 'human_deferred_acc': 0.948733058338244, 'system_acc': 0.851}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.16200000000000003, 'classifier_nondeferred_acc': 0.29012345679012347, 'human_deferred_acc': 0.948090692124105, 'system_acc': 0.8415}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.17200000000000004, 'classifier_nondeferred_acc': 0.27906976744186046, 'human_deferred_acc': 0.947463768115942, 'system_acc': 0.8325}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.18200000000000005, 'classifier_nondeferred_acc': 0.2692307692307692, 'human_deferred_acc': 0.9480440097799511, 'system_acc': 0.8245}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.19199999999999995, 'classifier_nondeferred_acc': 0.2578125, 'human_deferred_acc': 0.948019801980198, 'system_acc': 0.8155}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.20199999999999996, 'classifier_nondeferred_acc': 0.24752475247524752, 'human_deferred_acc': 0.9473684210526315, 'system_acc': 0.806}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.21250000000000002, 'classifier_nondeferred_acc': 0.24235294117647058, 'human_deferred_acc': 0.9466666666666667, 'system_acc': 0.797}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.22250000000000003, 'classifier_nondeferred_acc': 0.23146067415730337, 'human_deferred_acc': 0.9466237942122186, 'system_acc': 0.7875}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.23250000000000004, 'classifier_nondeferred_acc': 0.221505376344086, 'human_deferred_acc': 0.9459283387622149, 'system_acc': 0.7775}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.24250000000000005, 'classifier_nondeferred_acc': 0.21237113402061855, 'human_deferred_acc': 0.9458745874587459, 'system_acc': 0.768}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.25249999999999995, 'classifier_nondeferred_acc': 0.20594059405940593, 'human_deferred_acc': 0.945819397993311, 'system_acc': 0.759}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.26249999999999996, 'classifier_nondeferred_acc': 0.1980952380952381, 'human_deferred_acc': 0.9457627118644067, 'system_acc': 0.7495}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.273, 'classifier_nondeferred_acc': 0.19230769230769232, 'human_deferred_acc': 0.9456671251719395, 'system_acc': 0.74}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.28300000000000003, 'classifier_nondeferred_acc': 0.1872791519434629, 'human_deferred_acc': 0.9449093444909344, 'system_acc': 0.7305}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.29300000000000004, 'classifier_nondeferred_acc': 0.1825938566552901, 'human_deferred_acc': 0.9448373408769448, 'system_acc': 0.7215}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.30300000000000005, 'classifier_nondeferred_acc': 0.17656765676567657, 'human_deferred_acc': 0.9447632711621234, 'system_acc': 0.712}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.31299999999999994, 'classifier_nondeferred_acc': 0.1757188498402556, 'human_deferred_acc': 0.9439592430858806, 'system_acc': 0.7035}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.3235, 'classifier_nondeferred_acc': 0.17156105100463678, 'human_deferred_acc': 0.9438285291943829, 'system_acc': 0.694}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.3335, 'classifier_nondeferred_acc': 0.1679160419790105, 'human_deferred_acc': 0.9437359339834959, 'system_acc': 0.685}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.3435, 'classifier_nondeferred_acc': 0.16448326055312956, 'human_deferred_acc': 0.9436405178979437, 'system_acc': 0.676}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.35350000000000004, 'classifier_nondeferred_acc': 0.15983026874115983, 'human_deferred_acc': 0.9435421500386698, 'system_acc': 0.6665}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.36350000000000005, 'classifier_nondeferred_acc': 0.15680880330123798, 'human_deferred_acc': 0.9426551453260016, 'system_acc': 0.657}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.374, 'classifier_nondeferred_acc': 0.1537433155080214, 'human_deferred_acc': 0.9432907348242812, 'system_acc': 0.648}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.384, 'classifier_nondeferred_acc': 0.15234375, 'human_deferred_acc': 0.9423701298701299, 'system_acc': 0.639}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.394, 'classifier_nondeferred_acc': 0.15101522842639595, 'human_deferred_acc': 0.9414191419141914, 'system_acc': 0.63}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.404, 'classifier_nondeferred_acc': 0.15222772277227722, 'human_deferred_acc': 0.9421140939597316, 'system_acc': 0.623}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.41400000000000003, 'classifier_nondeferred_acc': 0.15217391304347827, 'human_deferred_acc': 0.9419795221843004, 'system_acc': 0.615}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.4245, 'classifier_nondeferred_acc': 0.15076560659599528, 'human_deferred_acc': 0.9417897480451781, 'system_acc': 0.606}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.4345, 'classifier_nondeferred_acc': 0.14844649021864212, 'human_deferred_acc': 0.9425287356321839, 'system_acc': 0.5975}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.4445, 'classifier_nondeferred_acc': 0.14623172103487064, 'human_deferred_acc': 0.9423942394239424, 'system_acc': 0.5885}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.4545, 'classifier_nondeferred_acc': 0.14521452145214522, 'human_deferred_acc': 0.9431714023831348, 'system_acc': 0.5805}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.4645, 'classifier_nondeferred_acc': 0.14316469321851452, 'human_deferred_acc': 0.9439775910364145, 'system_acc': 0.572}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.475, 'classifier_nondeferred_acc': 0.14210526315789473, 'human_deferred_acc': 0.9447619047619048, 'system_acc': 0.5635}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.485, 'classifier_nondeferred_acc': 0.14123711340206185, 'human_deferred_acc': 0.9436893203883495, 'system_acc': 0.5545}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.495, 'classifier_nondeferred_acc': 0.1404040404040404, 'human_deferred_acc': 0.9435643564356435, 'system_acc': 0.546}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.505, 'classifier_nondeferred_acc': 0.13960396039603962, 'human_deferred_acc': 0.9454545454545454, 'system_acc': 0.5385}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.515, 'classifier_nondeferred_acc': 0.13883495145631067, 'human_deferred_acc': 0.945360824742268, 'system_acc': 0.53}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.525, 'classifier_nondeferred_acc': 0.1361904761904762, 'human_deferred_acc': 0.9442105263157895, 'system_acc': 0.52}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.5355, 'classifier_nondeferred_acc': 0.13445378151260504, 'human_deferred_acc': 0.9451022604951561, 'system_acc': 0.511}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.5455, 'classifier_nondeferred_acc': 0.13382218148487626, 'human_deferred_acc': 0.9460946094609461, 'system_acc': 0.503}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.5555, 'classifier_nondeferred_acc': 0.1341134113411341, 'human_deferred_acc': 0.9460067491563554, 'system_acc': 0.495}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.5655, 'classifier_nondeferred_acc': 0.13527851458885942, 'human_deferred_acc': 0.9470655926352128, 'system_acc': 0.488}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.5755, 'classifier_nondeferred_acc': 0.1364031277150304, 'human_deferred_acc': 0.9458186101295641, 'system_acc': 0.48}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.5860000000000001, 'classifier_nondeferred_acc': 0.1348122866894198, 'human_deferred_acc': 0.9468599033816425, 'system_acc': 0.471}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.596, 'classifier_nondeferred_acc': 0.1342281879194631, 'human_deferred_acc': 0.9455445544554455, 'system_acc': 0.462}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.606, 'classifier_nondeferred_acc': 0.13448844884488448, 'human_deferred_acc': 0.9467005076142132, 'system_acc': 0.4545}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.616, 'classifier_nondeferred_acc': 0.13474025974025974, 'human_deferred_acc': 0.9466145833333334, 'system_acc': 0.4465}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.626, 'classifier_nondeferred_acc': 0.134185303514377, 'human_deferred_acc': 0.9478609625668449, 'system_acc': 0.4385}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.6365000000000001, 'classifier_nondeferred_acc': 0.13197172034564023, 'human_deferred_acc': 0.9463548830811555, 'system_acc': 0.428}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.6465000000000001, 'classifier_nondeferred_acc': 0.13302397525135345, 'human_deferred_acc': 0.9476661951909476, 'system_acc': 0.421}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.6565, 'classifier_nondeferred_acc': 0.13252094440213252, 'human_deferred_acc': 0.9490538573508006, 'system_acc': 0.413}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.6665, 'classifier_nondeferred_acc': 0.1312828207051763, 'human_deferred_acc': 0.9475262368815592, 'system_acc': 0.4035}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.6765, 'classifier_nondeferred_acc': 0.1293422025129342, 'human_deferred_acc': 0.9505409582689336, 'system_acc': 0.395}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.687, 'classifier_nondeferred_acc': 0.12882096069868995, 'human_deferred_acc': 0.950479233226837, 'system_acc': 0.386}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.6970000000000001, 'classifier_nondeferred_acc': 0.12697274031563846, 'human_deferred_acc': 0.9537953795379538, 'system_acc': 0.3775}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.7070000000000001, 'classifier_nondeferred_acc': 0.1265912305516266, 'human_deferred_acc': 0.9522184300341296, 'system_acc': 0.3685}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.7170000000000001, 'classifier_nondeferred_acc': 0.12552301255230125, 'human_deferred_acc': 0.9522968197879859, 'system_acc': 0.3595}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.727, 'classifier_nondeferred_acc': 0.12379642365887207, 'human_deferred_acc': 0.9505494505494505, 'system_acc': 0.3495}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.7375, 'classifier_nondeferred_acc': 0.12271186440677966, 'human_deferred_acc': 0.9523809523809523, 'system_acc': 0.3405}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.7475, 'classifier_nondeferred_acc': 0.12173913043478261, 'human_deferred_acc': 0.9524752475247524, 'system_acc': 0.3315}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.7575000000000001, 'classifier_nondeferred_acc': 0.12013201320132014, 'human_deferred_acc': 0.9525773195876288, 'system_acc': 0.322}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.7675, 'classifier_nondeferred_acc': 0.11856677524429968, 'human_deferred_acc': 0.9526881720430107, 'system_acc': 0.3125}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.7775, 'classifier_nondeferred_acc': 0.11768488745980707, 'human_deferred_acc': 0.9550561797752809, 'system_acc': 0.304}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.7875, 'classifier_nondeferred_acc': 0.11682539682539683, 'human_deferred_acc': 0.9552941176470588, 'system_acc': 0.295}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.798, 'classifier_nondeferred_acc': 0.11591478696741854, 'human_deferred_acc': 0.9529702970297029, 'system_acc': 0.285}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.808, 'classifier_nondeferred_acc': 0.11448019801980198, 'human_deferred_acc': 0.953125, 'system_acc': 0.2755}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.8180000000000001, 'classifier_nondeferred_acc': 0.1136919315403423, 'human_deferred_acc': 0.9505494505494505, 'system_acc': 0.266}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.8280000000000001, 'classifier_nondeferred_acc': 0.11231884057971014, 'human_deferred_acc': 0.9476744186046512, 'system_acc': 0.256}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.838, 'classifier_nondeferred_acc': 0.11097852028639618, 'human_deferred_acc': 0.9475308641975309, 'system_acc': 0.2465}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.8485, 'classifier_nondeferred_acc': 0.11019446081319977, 'human_deferred_acc': 0.9471947194719472, 'system_acc': 0.237}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.8585, 'classifier_nondeferred_acc': 0.10949330227140361, 'human_deferred_acc': 0.9540636042402827, 'system_acc': 0.229}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.8685, 'classifier_nondeferred_acc': 0.10823258491652274, 'human_deferred_acc': 0.9543726235741445, 'system_acc': 0.2195}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.8785000000000001, 'classifier_nondeferred_acc': 0.10813887307911212, 'human_deferred_acc': 0.9588477366255144, 'system_acc': 0.2115}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.8885, 'classifier_nondeferred_acc': 0.10692177827799662, 'human_deferred_acc': 0.9596412556053812, 'system_acc': 0.202}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.899, 'classifier_nondeferred_acc': 0.10622914349276974, 'human_deferred_acc': 0.9702970297029703, 'system_acc': 0.1935}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.909, 'classifier_nondeferred_acc': 0.10616061606160616, 'human_deferred_acc': 0.978021978021978, 'system_acc': 0.1855}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.919, 'classifier_nondeferred_acc': 0.10500544069640914, 'human_deferred_acc': 0.9814814814814815, 'system_acc': 0.176}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.929, 'classifier_nondeferred_acc': 0.10495156081808396, 'human_deferred_acc': 0.9788732394366197, 'system_acc': 0.167}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.9390000000000001, 'classifier_nondeferred_acc': 0.10383386581469649, 'human_deferred_acc': 0.9754098360655737, 'system_acc': 0.157}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.9495, 'classifier_nondeferred_acc': 0.10268562401263823, 'human_deferred_acc': 0.9801980198019802, 'system_acc': 0.147}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.9595, 'classifier_nondeferred_acc': 0.10161542470036478, 'human_deferred_acc': 0.9876543209876543, 'system_acc': 0.1375}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.9695, 'classifier_nondeferred_acc': 0.10056730273336771, 'human_deferred_acc': 0.9836065573770492, 'system_acc': 0.1275}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.9795, 'classifier_nondeferred_acc': 0.0995405819295559, 'human_deferred_acc': 1.0, 'system_acc': 0.118}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 0.9895, 'classifier_nondeferred_acc': 0.09853461344113189, 'human_deferred_acc': 1.0, 'system_acc': 0.108}, {'classifier_all_acc': 0.0975, 'human_all_acc': 0.949, 'coverage': 1.0, 'classifier_nondeferred_acc': 0.0975, 'human_deferred_acc': nan, 'system_acc': 0.0975}])
INFO:root:Loading HateSpeech data
INFO:root:Embedding texts
INFO:sentence_transformers.SentenceTransformer:Load pretrained SentenceTransformer: sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2
INFO:sentence_transformers.SentenceTransformer:Use pytorch device: cuda
Batches:   0%|          | 0/775 [00:00<?, ?it/s]Batches:   0%|          | 1/775 [00:00<02:23,  5.38it/s]Batches:   1%|          | 5/775 [00:00<00:41, 18.69it/s]Batches:   1%|▏         | 10/775 [00:00<00:27, 27.77it/s]Batches:   2%|▏         | 15/775 [00:00<00:21, 34.83it/s]Batches:   3%|▎         | 20/775 [00:00<00:19, 39.61it/s]Batches:   3%|▎         | 26/775 [00:00<00:16, 45.01it/s]Batches:   4%|▍         | 32/775 [00:00<00:15, 48.62it/s]Batches:   5%|▍         | 38/775 [00:00<00:14, 51.04it/s]Batches:   6%|▌         | 44/775 [00:01<00:13, 53.60it/s]Batches:   7%|▋         | 51/775 [00:01<00:12, 56.65it/s]Batches:   7%|▋         | 58/775 [00:01<00:12, 58.62it/s]Batches:   8%|▊         | 65/775 [00:01<00:11, 59.66it/s]Batches:   9%|▉         | 71/775 [00:01<00:11, 59.61it/s]Batches:  10%|█         | 78/775 [00:01<00:11, 60.39it/s]Batches:  11%|█         | 85/775 [00:01<00:11, 60.66it/s]Batches:  12%|█▏        | 92/775 [00:01<00:11, 62.08it/s]Batches:  13%|█▎        | 99/775 [00:01<00:11, 60.50it/s]Batches:  14%|█▎        | 106/775 [00:02<00:10, 61.21it/s]Batches:  15%|█▍        | 113/775 [00:02<00:10, 60.64it/s]Batches:  15%|█▌        | 120/775 [00:02<00:14, 45.65it/s]Batches:  16%|█▋        | 126/775 [00:02<00:13, 48.65it/s]Batches:  17%|█▋        | 133/775 [00:02<00:12, 53.25it/s]Batches:  18%|█▊        | 139/775 [00:02<00:11, 54.79it/s]Batches:  19%|█▉        | 147/775 [00:02<00:10, 59.22it/s]Batches:  20%|█▉        | 154/775 [00:02<00:10, 61.66it/s]Batches:  21%|██        | 161/775 [00:03<00:09, 62.83it/s]Batches:  22%|██▏       | 168/775 [00:03<00:09, 63.47it/s]Batches:  23%|██▎       | 175/775 [00:03<00:09, 64.58it/s]Batches:  23%|██▎       | 182/775 [00:03<00:09, 65.60it/s]Batches:  24%|██▍       | 189/775 [00:03<00:08, 65.71it/s]Batches:  25%|██▌       | 196/775 [00:03<00:08, 65.10it/s]Batches:  26%|██▌       | 203/775 [00:03<00:08, 66.29it/s]Batches:  27%|██▋       | 211/775 [00:03<00:08, 67.85it/s]Batches:  28%|██▊       | 219/775 [00:03<00:07, 70.15it/s]Batches:  29%|██▉       | 227/775 [00:04<00:07, 70.72it/s]Batches:  30%|███       | 235/775 [00:04<00:07, 69.41it/s]Batches:  31%|███       | 242/775 [00:04<00:07, 68.53it/s]Batches:  32%|███▏      | 249/775 [00:04<00:07, 67.46it/s]Batches:  33%|███▎      | 256/775 [00:04<00:07, 68.15it/s]Batches:  34%|███▍      | 263/775 [00:04<00:07, 66.56it/s]Batches:  35%|███▍      | 271/775 [00:04<00:07, 67.79it/s]Batches:  36%|███▌      | 279/775 [00:04<00:07, 68.25it/s]Batches:  37%|███▋      | 286/775 [00:04<00:07, 68.11it/s]Batches:  38%|███▊      | 294/775 [00:04<00:06, 69.20it/s]Batches:  39%|███▉      | 302/775 [00:05<00:06, 69.82it/s]Batches:  40%|███▉      | 309/775 [00:05<00:06, 69.05it/s]Batches:  41%|████      | 317/775 [00:05<00:06, 70.73it/s]Batches:  42%|████▏     | 325/775 [00:05<00:06, 70.03it/s]Batches:  43%|████▎     | 333/775 [00:05<00:06, 70.92it/s]Batches:  44%|████▍     | 341/775 [00:05<00:06, 71.21it/s]Batches:  45%|████▌     | 349/775 [00:05<00:06, 69.27it/s]Batches:  46%|████▌     | 356/775 [00:05<00:06, 67.87it/s]Batches:  47%|████▋     | 364/775 [00:05<00:05, 68.99it/s]Batches:  48%|████▊     | 372/775 [00:06<00:05, 70.25it/s]Batches:  49%|████▉     | 380/775 [00:06<00:05, 69.18it/s]Batches:  50%|████▉     | 387/775 [00:06<00:07, 51.37it/s]Batches:  51%|█████     | 394/775 [00:06<00:06, 55.03it/s]Batches:  52%|█████▏    | 402/775 [00:06<00:06, 59.13it/s]Batches:  53%|█████▎    | 410/775 [00:06<00:05, 62.86it/s]Batches:  54%|█████▍    | 418/775 [00:06<00:05, 66.39it/s]Batches:  55%|█████▍    | 426/775 [00:06<00:05, 67.56it/s]Batches:  56%|█████▌    | 434/775 [00:07<00:04, 70.25it/s]Batches:  57%|█████▋    | 442/775 [00:07<00:04, 71.00it/s]Batches:  58%|█████▊    | 450/775 [00:07<00:04, 72.71it/s]Batches:  59%|█████▉    | 458/775 [00:07<00:04, 72.38it/s]Batches:  60%|██████    | 466/775 [00:07<00:04, 73.03it/s]Batches:  61%|██████    | 474/775 [00:07<00:04, 72.70it/s]Batches:  62%|██████▏   | 482/775 [00:07<00:04, 72.97it/s]Batches:  63%|██████▎   | 490/775 [00:07<00:03, 74.23it/s]Batches:  64%|██████▍   | 498/775 [00:07<00:03, 73.65it/s]Batches:  65%|██████▌   | 506/775 [00:08<00:03, 73.68it/s]Batches:  66%|██████▋   | 514/775 [00:08<00:03, 73.96it/s]Batches:  67%|██████▋   | 522/775 [00:08<00:03, 73.57it/s]Batches:  68%|██████▊   | 530/775 [00:08<00:03, 72.52it/s]Batches:  69%|██████▉   | 538/775 [00:08<00:03, 73.35it/s]Batches:  70%|███████   | 546/775 [00:08<00:03, 74.45it/s]Batches:  72%|███████▏  | 555/775 [00:08<00:02, 76.27it/s]Batches:  73%|███████▎  | 563/775 [00:08<00:02, 76.16it/s]Batches:  74%|███████▎  | 571/775 [00:08<00:02, 75.64it/s]Batches:  75%|███████▍  | 579/775 [00:09<00:02, 75.26it/s]Batches:  76%|███████▌  | 587/775 [00:09<00:02, 74.69it/s]Batches:  77%|███████▋  | 595/775 [00:09<00:02, 74.50it/s]Batches:  78%|███████▊  | 603/775 [00:09<00:02, 74.40it/s]Batches:  79%|███████▉  | 611/775 [00:09<00:02, 74.46it/s]Batches:  80%|███████▉  | 619/775 [00:09<00:02, 72.88it/s]Batches:  81%|████████  | 627/775 [00:09<00:02, 72.61it/s]Batches:  82%|████████▏ | 635/775 [00:09<00:01, 73.38it/s]Batches:  83%|████████▎ | 643/775 [00:09<00:01, 72.13it/s]Batches:  84%|████████▍ | 651/775 [00:10<00:01, 73.31it/s]Batches:  85%|████████▌ | 659/775 [00:10<00:01, 73.79it/s]Batches:  86%|████████▌ | 667/775 [00:10<00:01, 73.83it/s]Batches:  87%|████████▋ | 676/775 [00:10<00:01, 76.46it/s]Batches:  88%|████████▊ | 684/775 [00:10<00:01, 56.24it/s]Batches:  89%|████████▉ | 692/775 [00:10<00:01, 60.75it/s]Batches:  90%|█████████ | 700/775 [00:10<00:01, 64.39it/s]Batches:  91%|█████████▏| 708/775 [00:10<00:01, 65.80it/s]Batches:  92%|█████████▏| 716/775 [00:11<00:00, 67.86it/s]Batches:  93%|█████████▎| 724/775 [00:11<00:00, 70.30it/s]Batches:  94%|█████████▍| 732/775 [00:11<00:00, 70.82it/s]Batches:  95%|█████████▌| 740/775 [00:11<00:00, 71.64it/s]Batches:  97%|█████████▋| 748/775 [00:11<00:00, 73.34it/s]Batches:  98%|█████████▊| 756/775 [00:11<00:00, 73.44it/s]Batches:  99%|█████████▊| 765/775 [00:11<00:00, 75.85it/s]Batches: 100%|█████████▉| 773/775 [00:11<00:00, 75.76it/s]Batches: 100%|██████████| 775/775 [00:11<00:00, 65.62it/s]
  0%|          | 0/1 [00:00<?, ?it/s]INFO:root:Epoch: [0][0/20]	Time 0.576 (0.576)	Loss 9.2018 (9.2018)	Prec@1 Classifier 42.773                                 (42.773)	Prec@1 Sim 19.141 (19.141)	Prec@1 Meta 11.328                                     (11.328)
INFO:root:Epoch: [0][10/20]	Time 0.012 (0.065)	Loss 7.9065 (8.5198)	Prec@1 Classifier 75.391                                 (71.804)	Prec@1 Sim 73.047 (60.618)	Prec@1 Meta 49.219                                     (20.632)
100%|██████████| 1/1 [00:00<00:00,  1.20it/s]100%|██████████| 1/1 [00:00<00:00,  1.20it/s]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
  0%|          | 0/6 [00:00<?, ?it/s]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:00<00:00,  5.12it/s][A100%|██████████| 1/1 [00:00<00:00,  5.12it/s]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0, accuracy: 0.910411622276029
 17%|█▋        | 1/6 [00:01<00:05,  1.16s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:00<00:00,  5.91it/s][A100%|██████████| 1/1 [00:00<00:00,  5.90it/s]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0.1, accuracy: 0.910411622276029
 33%|███▎      | 2/6 [00:02<00:05,  1.30s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:00<00:00,  2.92it/s][A100%|██████████| 1/1 [00:00<00:00,  2.90it/s]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0.3, accuracy: 0.910411622276029
 50%|█████     | 3/6 [00:03<00:03,  1.33s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:00<00:00,  4.86it/s][A100%|██████████| 1/1 [00:00<00:00,  4.85it/s]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0.5, accuracy: 0.910411622276029
 67%|██████▋   | 4/6 [00:05<00:02,  1.27s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:00<00:00,  1.77it/s][A100%|██████████| 1/1 [00:00<00:00,  1.77it/s]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0.9, accuracy: 0.910411622276029
 83%|████████▎ | 5/6 [00:06<00:01,  1.38s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:00<00:00,  5.55it/s][A100%|██████████| 1/1 [00:00<00:00,  5.54it/s]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 1, accuracy: 0.910411622276029
100%|██████████| 6/6 [00:07<00:00,  1.29s/it]100%|██████████| 6/6 [00:07<00:00,  1.30s/it]
  0%|          | 0/1 [00:00<?, ?it/s]/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
100%|██████████| 1/1 [00:00<00:00,  5.88it/s]100%|██████████| 1/1 [00:00<00:00,  5.87it/s]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  1.95it/s]100%|██████████| 1/1 [00:00<00:00,  1.95it/s]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
  0%|          | 0/1 [00:00<?, ?it/s]/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/one_v_all.py:43: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
100%|██████████| 1/1 [00:00<00:00,  4.05it/s]100%|██████████| 1/1 [00:00<00:00,  4.05it/s]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
  0%|          | 0/3 [00:00<?, ?it/s]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:35: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:36: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  m2 = torch.tensor(m2).to(self.device)

100%|██████████| 1/1 [00:00<00:00,  3.14it/s][A100%|██████████| 1/1 [00:00<00:00,  3.14it/s]
INFO:root:alpha: 0, accuracy: 0.685633575464084
 33%|███▎      | 1/3 [00:00<00:01,  1.09it/s]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:35: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:36: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  m2 = torch.tensor(m2).to(self.device)

100%|██████████| 1/1 [00:00<00:00,  6.91it/s][A100%|██████████| 1/1 [00:00<00:00,  6.90it/s]
INFO:root:alpha: 0.5, accuracy: 0.685633575464084
 67%|██████▋   | 2/3 [00:01<00:00,  1.24it/s]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:35: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:36: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  m2 = torch.tensor(m2).to(self.device)

100%|██████████| 1/1 [00:00<00:00,  6.61it/s][A100%|██████████| 1/1 [00:00<00:00,  6.60it/s]
INFO:root:alpha: 1, accuracy: 0.685633575464084
100%|██████████| 3/3 [00:02<00:00,  1.15it/s]100%|██████████| 3/3 [00:02<00:00,  1.16it/s]
  0%|          | 0/1 [00:00<?, ?it/s]/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:35: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:36: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  m2 = torch.tensor(m2).to(self.device)
100%|██████████| 1/1 [00:00<00:00,  3.16it/s]100%|██████████| 1/1 [00:00<00:00,  3.16it/s]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/mcharusaie/myvenv/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=DenseNet121_Weights.IMAGENET1K_V1`. You can also use `weights=DenseNet121_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
  0%|          | 0/1 [00:00<?, ?it/s]INFO:root:Epoch: [0][0/30]	Time 0.657 (0.657)	Loss 48.1767 (48.1767)	Prec@1 Classifier 6.250                                 (6.250)	Prec@1 Sim 0.000 (0.000)	Prec@1 Meta 6.250                                     (6.250)
INFO:root:Epoch: [0][10/30]	Time 0.276 (0.358)	Loss 17.3277 (23.3583)	Prec@1 Classifier 3.125                                 (6.250)	Prec@1 Sim 6.250 (6.818)	Prec@1 Meta 3.125                                     (5.114)
INFO:root:Epoch: [0][20/30]	Time 0.486 (0.351)	Loss 18.5083 (20.8270)	Prec@1 Classifier 3.125                                 (7.440)	Prec@1 Sim 9.375 (8.631)	Prec@1 Meta 3.125                                     (6.250)
100%|██████████| 1/1 [00:10<00:00, 10.24s/it]100%|██████████| 1/1 [00:10<00:00, 10.24s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/mcharusaie/myvenv/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=DenseNet121_Weights.IMAGENET1K_V1`. You can also use `weights=DenseNet121_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
  0%|          | 0/6 [00:00<?, ?it/s]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:05<00:00,  5.51s/it][A100%|██████████| 1/1 [00:05<00:00,  5.51s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0, accuracy: 0.6666666666666666
 17%|█▋        | 1/6 [00:07<00:36,  7.26s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:05<00:00,  5.44s/it][A100%|██████████| 1/1 [00:05<00:00,  5.44s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0.1, accuracy: 0.6666666666666666
 33%|███▎      | 2/6 [00:14<00:28,  7.10s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:05<00:00,  5.55s/it][A100%|██████████| 1/1 [00:05<00:00,  5.55s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0.3, accuracy: 0.6666666666666666
 50%|█████     | 3/6 [00:21<00:21,  7.10s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:05<00:00,  5.34s/it][A100%|██████████| 1/1 [00:05<00:00,  5.34s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0.5, accuracy: 0.6666666666666666
 67%|██████▋   | 4/6 [00:28<00:14,  7.00s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:04<00:00,  4.82s/it][A100%|██████████| 1/1 [00:04<00:00,  4.82s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0.9, accuracy: 0.6666666666666666
 83%|████████▎ | 5/6 [00:34<00:06,  6.73s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)

100%|██████████| 1/1 [00:04<00:00,  4.81s/it][A100%|██████████| 1/1 [00:04<00:00,  4.81s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 1, accuracy: 0.6666666666666666
100%|██████████| 6/6 [00:40<00:00,  6.58s/it]100%|██████████| 6/6 [00:40<00:00,  6.79s/it]
  0%|          | 0/1 [00:00<?, ?it/s]/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/methods/realizable_surrogate.py:21: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
100%|██████████| 1/1 [00:04<00:00,  4.68s/it]100%|██████████| 1/1 [00:04<00:00,  4.68s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/mcharusaie/myvenv/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=DenseNet121_Weights.IMAGENET1K_V1`. You can also use `weights=DenseNet121_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:08<00:00,  8.78s/it]100%|██████████| 1/1 [00:08<00:00,  8.78s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/mcharusaie/myvenv/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=DenseNet121_Weights.IMAGENET1K_V1`. You can also use `weights=DenseNet121_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
  0%|          | 0/1 [00:00<?, ?it/s]/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/one_v_all.py:43: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
100%|██████████| 1/1 [00:05<00:00,  5.04s/it]100%|██████████| 1/1 [00:05<00:00,  5.04s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/mcharusaie/myvenv/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=DenseNet121_Weights.IMAGENET1K_V1`. You can also use `weights=DenseNet121_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
  0%|          | 0/3 [00:00<?, ?it/s]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:35: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:36: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  m2 = torch.tensor(m2).to(self.device)

100%|██████████| 1/1 [00:04<00:00,  4.59s/it][A100%|██████████| 1/1 [00:04<00:00,  4.59s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0, accuracy: 0.08333333333333333
 33%|███▎      | 1/3 [00:05<00:11,  5.70s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:35: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:36: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  m2 = torch.tensor(m2).to(self.device)

100%|██████████| 1/1 [00:04<00:00,  4.50s/it][A100%|██████████| 1/1 [00:04<00:00,  4.50s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 0.5, accuracy: 0.08333333333333333
 67%|██████▋   | 2/3 [00:11<00:05,  5.64s/it]
  0%|          | 0/1 [00:00<?, ?it/s][A/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:35: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:36: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  m2 = torch.tensor(m2).to(self.device)

100%|██████████| 1/1 [00:04<00:00,  4.83s/it][A100%|██████████| 1/1 [00:04<00:00,  4.83s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
INFO:root:alpha: 1, accuracy: 0.08333333333333333
100%|██████████| 3/3 [00:17<00:00,  5.85s/it]100%|██████████| 3/3 [00:17<00:00,  5.80s/it]
  0%|          | 0/1 [00:00<?, ?it/s]/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:35: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  human_correct = torch.tensor(human_correct).to(self.device)
/lustre/home/mcharusaie/Git_Beyond/Experiments/../human_ai_deferral/baselines/lce_surrogate.py:36: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  m2 = torch.tensor(m2).to(self.device)
100%|██████████| 1/1 [00:04<00:00,  4.75s/it]100%|██████████| 1/1 [00:04<00:00,  4.75s/it]
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.
  avg = a.mean(axis, **keepdims_kw)
/home/mcharusaie/myvenv/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
